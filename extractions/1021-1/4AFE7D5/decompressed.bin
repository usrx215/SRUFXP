<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<title>Rovi V2</title>
		<link  href="style.css" rel="stylesheet" type="text/css" />
        <script type="text/javascript">var ongoing_testing = false;</script>

		<script type="text/javascript">
			var $cn = $cn || {};
			$cn.config = {
				CurrentTheme: 'bby',
				CurrentKeymap: 'MTK8560'
			}
			
			document.write('<script type="text/javascript" src="theme/'+ $cn.config.CurrentTheme + '/config.js"></scr' + 'ipt>'); 
		</script>
		
		<script type="text/javascript" src="$MANAGER_WIDGET/Common/Util/Include.js"></script>
        <script type="text/javascript" src="$MANAGER_WIDGET/Common/Util/Language.js"></script>

        <script type="text/javascript" src="$MANAGER_WIDGET/Common/Plugin/Define.js"></script>	
        <script type="text/javascript" src="$MANAGER_WIDGET/Common/API/Plugin.js"></script>
        <script type='text/javascript' language='javascript' src='$MANAGER_WIDGET/Common/API/Widget.js'></script>
        <script type='text/javascript' language='javascript' src='$MANAGER_WIDGET/Common/API/TVKeyValue.js'></script>
		<script type="text/javascript" language="JavaScript" src="$MANAGER_WIDGET/Common/API/CM_AVSetting.js"></script>
		
        <script type='text/javascript' language='javascript' src='lib/init.js'></script>
        <script type='text/javascript' language='javascript' src='lib/uilib.js'></script>
        <script type='text/javascript' language='javascript' src='lib/extlib.js'></script>
        <script type='text/javascript' language='javascript' src='deploy/application-min.js'></script>
        <script type="text/javascript" language="JavaScript" src="deploy/templates.js"></script>
        
        
    </head>
	<body id="widgetBody" onunload="widgetUnload()" style="background: transparent;">
    <!-- Removed hard coded onload, set programmatically in init.js -->
		<div id="SplashScreen">
			<div id="SplashLogo"></div>
			<div id="SplashProgressContainer">
				<div id="SplashProgress"></div>
			</div>
			<div id="loadingerror">
				<div id="loadingerrormsg">You have received a loading error!!!</div>
				<p>
					<a id="exitbtn" href="javascript:void(0)" class="button" left="exitbtn" right="exitbtn" up="exitbtn" down="exitbtn"  action="application.defaultExit()">Exit</a>
				</p>
			</div>	
			<div id="SplashPoweredBy"></div>
			<div id="SplashCopyright" class="SplashCopyright"></div>
		</div>
		<div class="navigationContainer"><a id="navigation" href="#"></a></div>
		<div id="PlayerContent">
            
        </div>
        <div id="detention">
            <div id="uicontainer"><div id="store">
        <div class="container" id="browse">

          <div id="modalcontrol"><div id="modalcontainer">
          <div id="Overlay"> </div>
          <div id="ModalWindow">
            <div class="modal-bg-wrap">
              <div class="modal-bg modal-n"> </div>
              <div class="modal-bg modal-ne"> </div>
              <div class="modal-bg modal-e"> </div>
              <div class="modal-bg modal-se"> </div>
              <div class="modal-bg modal-s"> </div>
              <div class="modal-bg modal-sw"> </div>
              <div class="modal-bg modal-w"> </div>
              <div class="modal-bg modal-nw"> </div>
            </div>
            <div id="ModalContentWrap">
              <div id="ModalContent">
              </div>
            </div>
          </div>
        </div></div>
          <div id="welcome"><div class="welcomecontainer">
          <!-- #welcomeintro is the first page shown, then it is hidden -->
          <div id="welcomeintro">
          </div>
          <!-- #welcomemessage is first hidden, then it is shown upon getStarted() -->
          <div id="welcomemessage">
            <div class="horizontallogo"> </div>
            <div class="activationtitle">Activation</div>
            <div class="matteback">
              <div class="welcomerowContainer">
                <div class="welcomerow">
                  ACTIVATE NOW<a action="BrowseView.WelcomeControl.startActivation()" class="button default startactivation" down="rightbutton" id="leftbutton" left="leftbutton" right="leftbutton" up="rightbutton"> Start Activation </a>
                </div>
                <div class="welcomerow">
                  <span>Creating an account gives you immediate benefits:</span>
                  <ul id="defaultWelcome">
                    <li>Instant rentals and purchases are 1-click away</li>
                    <li>Access the latest new releases every Tuesday</li>
                    <li>Securely store movies and TV shows in your CinemaNow library!</li>
                    <li class="hidden" id="uvwelcomebenefit">Playback UltraViolet titles across any UltraViolet-enabled device</li>
                  </ul>
                  <ul class="hidden" id="diskToDigitalWelcome">
                    <li>Make digital copies of discs you already own</li>
                    <li>Playback Disc to Digital content on any device</li>
                    <li>Keep a safe on-line locker of all your media</li>
                  </ul>
                </div>
              </div>
            </div>


            <div class="welcomerowContainerBottom">
              <div class="welcomerow">
                ACTIVATE LATER<a action="BrowseView.WelcomeControl.explore()" class="button default" down="leftbutton" id="rightbutton" left="rightbutton" right="rightbutton" up="leftbutton">Explore CinemaNow</a>
              </div>
              <div class="welcomerow greytext">
                If you don't want to activate just yet, feel free to explore our catalog of 15,000 movies<br> and hit TV shows. Remember, you'll still need to activate before watching any titles. <br>You can do this at any time by going to Settings &gt; Activate Device.
              </div>
            </div>
          </div>
          <div id="welcomebackground"> </div>
          <a action="BrowseView.WelcomeControl.getStarted()" class="button default" down="welcomebutton" id="welcomebutton" left="welcomebutton" right="welcomebutton" up="welcomebutton"> </a>
          <div id="welcomebuttonmask"> </div>
        </div><div id="d2dUnavailable">
          <div class="header">
            <div class="horizontallogo"> </div>
            <div class="d2dtitle"> No Disc to digital offer available </div>
            <div class="seperator"> </div>
          </div>
          <div class="content">
            <div> There is currently no Disc to Digital offer available for this disc </div>
            <div id="d2dbuttons">
              <a action="BrowseView.WelcomeControl.hide()" class="button default" down="d2dbrowsebutton" id="d2dbrowsebutton" left="d2dbrowsebutton" right="cancelbutton" up="d2dbrowsebutton"> Browse Store</a>
              <a action="BrowseView.showExit()" class="button" down="cancelbutton" id="cancelbutton" left="d2dbrowsebutton" right="cancelbutton" up="cancelbutton"> Exit </a>
            </div>
          </div>
        </div></div>
          <div id="activatefullscreen"><div class="activationcontainer">
          <div id="activationintro">
            <div class="header">
              <div class="horizontallogo"> </div>
              <div class="activationtitle"> START ACTIVATION </div>
              <div class="seperator"> </div>
            </div>
            <div class="content">
              <div class="greytext">To get started go to the following URL:</div>
              <div class="url"> </div>
              <a action="BrowseView.ActivationPcView.startFirstTime()" class="button default" down="okaybuttonactivation" id="okaybuttonactivation" left="cancelbuttonactivation" right="cancelbuttonactivation" up="okaybuttonacitvation"> OK, I'm There </a>
              <a action="BrowseView.ActivationPcView.cancel()" class="button default" down="cancelbuttonactivation" id="cancelbuttonactivation" left="okaybuttonactivation" right="okaybuttonactivation" up="cancelbuttonactivation"> Cancel </a>
              <div class="helptext">You can do this from a web browser accessible from your PC, tablet or smartphone.</div>
            </div>
          </div>
          <div id="activationbody">
            <div class="header">
              <div class="horizontallogo"> </div>
              <div class="activationtitle"> Activation </div>
              <div class="seperator"> </div>
            </div>
            <div class="content">
              <div class="white">Here is your Activation code:</div>
              <div id="ActivateViaPcCode">
                <ul>
                  <li id="Code0"> </li>
                  <li id="Code1"> </li>
                  <li id="Code2"> </li>
                  <li id="Code3"> </li>
                  <li id="Code4"> </li>
                  <li id="Code5"> </li>
                  <li id="Code6"> </li>
                </ul>
              </div>

              <div class="clear"> </div>
              <div class="greytext">
                Please enter this into the &quot;Activation Code&quot; field at <span class="url white"> </span>
              </div>
              <a action="BrowseView.ActivationPcView.start()" class="button default" down="generatenewcodebutton" id="generatenewcodebutton" left="activationbodycancelbutton" right="activationbodycancelbutton" up="generatenewcodebutton"> Generate New Code </a>
              <a action="BrowseView.ActivationPcView.cancel()" class="button default" down="activationbodycancelbutton" id="activationbodycancelbutton" left="generatenewcodebutton" right="generatenewcodebutton" up="activationbodycancelbutton"> Cancel </a>
            </div>

          </div>
          <div id="activationsuccess">
            <div class="header">
              <div class="horizontallogo"> </div>
              <div class="activationtitle"> Activation </div>
              <div class="seperator"> </div>
            </div>
            <div class="content greytext" id="activationsuccesscontent">
              <div class="white"> Device activated successfully </div>
              <div>
                The following name has been assigned to this device:<div class="white" id="activationdevicename"> </div>
                <div class="billingExtras" id="accountCredit">
                  Your account credit is <span id="acctCredit"> </span>.
                </div>
                <div class="billingExtras" id="accountCreditNoBilling">
                  Once your account credit is used up, you will need to add billing info to your <br>
                  account before buying or renting additional titles. <br>Go to <span class="white">www.cinemanow.com/billing</span> to add billing info.
                </div>
                <div class="billingExtras" id="noBilling">
                  You will need to add billing info to your account before buying or renting titles. <br>Go to <span class="white">www.cinemanow.com/billing</span> to add billing info.
                </div>
                <a action="BrowseView.ActivationPcView.hide()" class="button default mini" down="activationcontinuebutton" id="activationcontinuebutton" left="activationcontinuebutton" right="activationcontinuebutton" up="activationcontinuebutton"> Done </a>
              </div>
              <div id="uvNotifyMessage">
                <div class="uvLogo"> </div>
                <p>Please visit the My Account section of CinemaNow.com to create or link an UltraViolet account or to learn more about the added benefits of UltraViolet!</p>
              </div>
            </div>
          </div>
        </div></div>
          <div id="merchpage"><div id="merchlogo"> </div><div id="featuredcontainer">
          <div class="hdr" id="featureditleheader"> </div>
          <div id="featuredpromotion">
            
          </div>
        </div><div id="newcollectioncontainer">
          <div class="hdr" id="newcollectionheader"> </div>
          <div id="newcollections">
            
          </div>
        </div><div id="newcontentcontainer">
          <div id="newmoviescontainer">
            <div class="hdr" id="newmovieheader"> </div>
            <div class="titlecontainer" id="newmovies">
              
            </div>
          </div>
          <div id="newtvcontainer">
            <div class="hdr" id="newtvshowheader"> </div>
            <div class="titlecontainer" id="newtvshows">
              
            </div>
          </div>
        </div><div id="actionbuttoncontainer">
          
        </div></div>
          <div id="logo"> </div>
          <div id="dock"><div id="dockcontainer">
          
        </div></div>
          <div id="signin"><div id="horizontallogo"> </div><div class="matteback"> </div><div id="signincontainer">
          
          
        </div></div>
          <div id="mainstage">
            <div id="genericloader"><div id="genericloadercontainer">
          <div id="GenericOverlay">
            <div id="genericspinnercontainer">
              <div id="genericspinner"> </div>
              <div id="genericloadingprocessstring"> </div>
            </div>
          </div>
        </div></div>
            <div id="titledetails"><div id="titledetailscontainer">
          
          
          
          
          
          
        </div></div>
            <div class="wheel-separator" id="WheelSeparator">
              <div class="wheel-thumb-left" id="WheelThumb"> </div>
            </div>
            <div action="log.write('titledetailsmask action')" id="titledetailsmask" pointeraction="BrowseView.hideTitleDetailsMask()" pointerfocus="log.write('titledetailsmask pointerfocus')">
            </div>
            <div class="browse" id="wheel"><div class="wheelControls">
          <div class="wheelcolumn" id="masterdatasource"> </div>
          <div class="wheelcolumn" id="slavedatasource"> </div>
          <div action="log.write('master wheel mask up.')" id="masterwheelmaskup" pointeraction="BrowseView.WheelControl.clickWheelAction('masterwheelmaskup', 'up', 'selectedmaster', 0.6)" pointerfocus="BrowseView.WheelControl.setWheelPointerFocus('masterwheelmaskup', 'selectedmaster', 0.6)" pointermouseout="BrowseView.WheelControl.setWheelPointerLoseFocus('masterwheelmaskup', 'selectedmaster')"> </div>
          <div action="log.write('master wheel mask down.')" id="masterwheelmaskdown" pointeraction="BrowseView.WheelControl.clickWheelAction('masterwheelmaskdown', 'down', 'selectedmaster', 0.6)" pointerfocus="BrowseView.WheelControl.setWheelPointerFocus('masterwheelmaskdown', 'selectedmaster', 0.6)" pointermouseout="BrowseView.WheelControl.setWheelPointerLoseFocus('masterwheelmaskdown', 'selectedmaster')"> </div>
          <div action="log.write('slave wheel mask up.')" id="slavewheelmaskup" pointeraction="BrowseView.WheelControl.clickWheelAction('slavewheelmaskup', 'up', 'selectedslave', 0.6)" pointerfocus="BrowseView.WheelControl.setWheelPointerFocus('slavewheelmaskup', 'selectedslave', 0.6)" pointermouseout="BrowseView.WheelControl.setWheelPointerLoseFocus('slavewheelmaskup', 'selectedslave')"> </div>
          <div action="log.write('slave wheel mask down.')" id="slavewheelmaskdown" pointeraction="BrowseView.WheelControl.clickWheelAction('slavewheelmaskdown', 'down', 'selectedslave', 0.6)" pointerfocus="BrowseView.WheelControl.setWheelPointerFocus('slavewheelmaskdown', 'selectedslave', 0.6)" pointermouseout="BrowseView.WheelControl.setWheelPointerLoseFocus('slavewheelmaskdown', 'selectedslave')"> </div>
          <a action="log.write('selected master')" class="selectedmaster" focus="log.write('test')" id="selectedmaster" right="selectedslave"> </a>
          <a action="log.write('selected slave')" class="selectedslave" focus="log.write('test')" id="selectedslave" left="selectedmaster"> </a>
        </div></div>
            <div class="search" id="singlewheel"><div class="singlewheel-left"> </div><div class="singlewheel-right"> </div><div class="wheelControls">
          <div class="wheelcolumn" id="singlemasterdatasource"> </div>
          <div action="log.write('single wheel mask up.')" id="singlewheelmaskup" pointeraction="BrowseView.WheelControl.clickWheelAction('singlewheelmaskup', 'up', 'singleselectedmaster', 0.6)" pointerfocus="BrowseView.WheelControl.setWheelPointerFocus('singlewheelmaskup', 'singleselectedmaster', 0.6)" pointermouseout="BrowseView.WheelControl.setWheelPointerLoseFocus('singlewheelmaskup', 'singleselectedmaster')"> </div>
          <div action="log.write('single wheel mask down.')" id="singlewheelmaskdown" pointeraction="BrowseView.WheelControl.clickWheelAction('singlewheelmaskdown', 'down', 'singleselectedmaster', 0.6)" pointerfocus="BrowseView.WheelControl.setWheelPointerFocus('singlewheelmaskdown', 'singleselectedmaster', 0.6)" pointermouseout="BrowseView.WheelControl.setWheelPointerLoseFocus('singlewheelmaskdown', 'singleselectedmaster')"> </div>
          <a action="log.write('single selected master')" class="selectedmaster" focus="log.write('test')" id="singleselectedmaster"> </a>
        </div></div>
            <div class="search" id="keyboard"><div id="SearchTextWrap">
          <div id="NoWrapSaver">
            <div id="SearchText">_</div>
          </div>
        </div><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: ' '})" class="key col-3" id="KeyboardKeySPACETop" left="singleselectedmaster" up="KeyboardKeySPACEBottom">SPACE</a><a action="application.events.publish('keyboardback', {caller: 'searchkeyboardcontrol'})" class="key col-3 key-back" id="KeyboardKeyBACKTop" up="KeyboardKeyBACKBottom"> DEL</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'A'})" class="key standard" id="FirstKey" left="singleselectedmaster">A</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '1'})" class="key alt" id="KeyboardKey1">1</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'B'})" class="key standard" up="KeyboardKeySPACETop">B</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '2'})" class="key alt" id="KeyboardKey2">2</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'C'})" class="key standard" up="KeyboardKeySPACETop">C</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '3'})" class="key alt" id="KeyboardKey3">3</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'D'})" class="key standard" up="KeyboardKeyBACKTop">D</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '4'})" class="key alt" id="KeyboardKey4">4</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'E'})" class="key standard" up="KeyboardKeyBACKTop">E</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '5'})" class="key alt" id="KeyboardKey5">5</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'F'})" class="key standard" left="singleselectedmaster">F</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '6'})" class="key alt" id="KeyboardKey6">6</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'G'})" class="key standard">G</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '7'})" class="key alt" id="KeyboardKey7">7</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'H'})" class="key standard">H</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '8'})" class="key alt" id="KeyboardKey8">8</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'I'})" class="key standard">I</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '9'})" class="key alt" id="KeyboardKey9">9</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'J'})" class="key standard">J</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '0'})" class="key alt" id="KeyboardKey0">0</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'K'})" class="key standard" left="singleselectedmaster">K</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '-'})" class="key alt">-</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'L'})" class="key standard">L</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '/'})" class="key alt">/</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'M'})" class="key standard">M</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: ':'})" class="key alt">:</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'N'})" class="key standard">N</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: ';'})" class="key alt">;</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'O'})" class="key standard">O</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '$'})" class="key alt">$</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'P'})" class="key standard" left="singleselectedmaster">P</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '('})" class="key alt">(</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'Q'})" class="key standard">Q</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: ')'})" class="key alt">)</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'R'})" class="key standard">R</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '&amp;'})" class="key alt">&amp;</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'S'})" class="key standard">S</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '@'})" class="key alt">@</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'T'})" class="key standard">T</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '\''})" class="key alt">'</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'U'})" class="key standard" left="singleselectedmaster">U</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '.'})" class="key alt">.</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'V'})" class="key standard" down="KeyboardAltSwap">V</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: ','})" class="key alt">,</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'W'})" class="key standard" down="KeyboardAltSwap">W</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '?'})" class="key alt">?</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'X'})" class="key standard" down="keyboardKeyCLEARBottom">X</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '!'})" class="key alt">!</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'Y'})" class="key standard" down="KeyboardKeyCLEARBottom" rightaction="focusgrid">Y</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '='})" class="key alt" rightaction="focusgrid">=</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: 'Z'})" class="key standard" down="KeyboardKeySPACEBottom">Z</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: '#'})" class="key alt">#</a><a action="application.events.publish('keyboardswap', {caller: 'searchkeyboardcontrol', value: 'alt'})" class="key col-2 standard" down="KeyboardKeySPACEBottom" id="KeyboardAltSwap">123,?</a><a action="application.events.publish('keyboardswap', {caller: 'searchkeyboardcontrol', value: 'standard'})" class="key col-2 alt" id="KeyboardStandardSwap">ABC</a><a action="application.events.publish('keyboardclear', {caller: 'searchkeyboardcontrol'})" class="key col-2" down="KeyboardKeyBACKBottom" id="KeyboardKeyCLEARBottom">CLEAR</a><a action="application.events.publish('keyboardselect', {caller: 'searchkeyboardcontrol', value: ' '})" class="key col-3" down="KeyboardKeySPACETop" id="KeyboardKeySPACEBottom" left="singleselectedmaster">SPACE</a><a action="application.events.publish('keyboardback', {caller: 'searchkeyboardcontrol'})" class="key col-3 key-back car" down="KeyboardKeyBACKTop" id="KeyboardKeyBACKBottom" up="KeyboardKeyCLEARBottom">DEL</a></div>
            <div id="gridview">
              <div id="gridloader"><div id="gridloadercontainer">
          <div id="GridOverlay">
            <div id="gridspinnercontainer">
              <div id="gridspinner"> </div>
              <div id="gridloadingprocessstring"> </div>
            </div>
          </div>
        </div></div>
              <div class="browse search" id="titlegrid"><div id="titlegrid_container">
          <div id="altmessage">
            
            
            
          </div>
          <div id="titlegrid_header">
            
          </div>
          <div id="titlelist">

            
            
            
            
            
            
            
          </div>
          <div id="titlemeta">
            <div action="BrowseView.GridControl.metaClickAction()" class="titlemetamask" pointerfocus="log.write('titlemeta pointerfocus')" pointermove="log.write('titlemeta pointermove')"> </div>
            <div id="titlemetacontainer">
              
              
              
              
              
              
            </div>
          </div>
        </div></div>
              <div class="browse" id="imagegrid"><div id="imagelist">
          
        </div></div>
              <div class="browse" id="biogrid"><div id="imagelist">
          
        </div></div>
              <div class="browse" id="reviewgrid"><div id="imagelist">
          
          
        </div></div>
              <div class="browse" id="creditsgrid"><div id="creditsgridcontainer">
          
          
        </div></div>
              <div class="browse" id="techgrid"><div id="techgridcontainer">
          
        </div></div>
              <div class="browse" id="scrollbar"><div>
          <!-- This comment is needed so the packager does not get angry -->
        </div></div>
            </div>
            <div id="disctodigitalgrid"><div id="d2dinfocontainer">
          
        </div></div>
            <div id="settingspanel"><div id="SettingsPanel">
          
        </div></div>
            <div id="checkoutpanel"><div id="checkout_container"> </div></div>
            <div id="librarypanel"><div id="library">
          <div id="librarytop">
            <p class="white">Your Library is empty.</p>
            <p>Press the Browse Store button, and browse for new movies or TV shows.</p>
            <p class="libraryActivate">Activate your device to access videos in your Library.</p>
            <div class="buttons">
              <a action="BrowseView.Library.onActivate()" class="button libraryActivate" down="btnLibraryActivate" id="btnLibraryActivate" left="dock-library">Activate</a>
              <a action="BrowseView.goHome()" class="button" down="btnLibraryBrowseStore" id="btnLibraryBrowseStore">Browse Store</a>
            </div>
          </div>
        </div></div>
            <div id="messagepanel"><div>
          <!-- This is required so compiler won't complain -->
        </div></div>
            <div id="ScreenSeparator">
              <div class="wheel-thumb-right" id="ScreenSeparatorThumb"> </div>
            </div>
            <div action="log.write('searchPanelMask action')" id="searchPanelMask" pointeraction="application.events.publish('elementfocus', { focusedelem: 'KeyboardKeyBACKTop' })" pointerfocus="log.write('searchPanelMask pointerfocus')">
            </div>
            <div id="HorizontalFadeTop">
              <div class="buffer"> </div>
            </div>
            <div id="HorizontalFade">
              <div class="buffer"> </div>
            </div>
          </div>
          <div id="skinnykeyboard"><div id="SkinnySearchTextWrap">
          <div id="NoWrapSaver">
            <div id="SkinnySearchText">_</div>
          </div>
        </div><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: '-'})" class="key standard" id="SkinnyTopDash" left="SkinnyTopDash" up="Skinny0">-</a><a action="application.events.publish('keyboardclear', {caller: 'giftcardkeyboardcontrol'})" class="key col-2" id="SkinnyTopClear" up="SkinnyBottomClear">CLEAR</a><a action="application.events.publish('keyboardback', {caller: 'giftcardkeyboardcontrol'})" class="key col-3 key-back" id="SkinnyTopBack" right="gcredeem" up="SkinnyBottomBack">DEL</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'A'})" class="key standard" id="SkinnyFirstKey" left="SkinnyFirstKey">A</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'B'})" class="key standard">B</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'C'})" class="key standard">C</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'D'})" class="key standard">D</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'E'})" class="key standard" right="gcredeem">E</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'F'})" class="key standard" id="SkinnyF" left="SkinnyF" right="gcredeem">F</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'G'})" class="key standard" id="SkinnyG">G</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'H'})" class="key standard">H</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'I'})" class="key standard">I</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'J'})" class="key standard" right="gcredeem">J</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'K'})" class="key standard" id="SkinnyK" left="SkinnyK">K</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'L'})" class="key standard" id="SkinnyL">L</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'M'})" class="key standard" id="SkinnyM">M</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'N'})" class="key standard">N</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'O'})" class="key standard" right="gcredeem">O</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'P'})" class="key standard" id="SkinnyP" left="SkinnyP">P</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'Q'})" class="key standard">Q</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'R'})" class="key standard" id="SkinnyR">R</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'S'})" class="key standard" id="SkinnyS">S</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'T'})" class="key standard" right="gcredeem">T</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'U'})" class="key standard" id="SkinnyU" left="SkinnyU">U</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'V'})" class="key standard">V</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'W'})" class="key standard">W</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'X'})" class="key standard" id="SkinnyX">X</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'Y'})" class="key standard" id="SkinnyY" right="gcredeem">Y</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: 'Z'})" class="key standard" id="SkinnyZ" left="SkinnyZ">Z</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: '1'})" class="key standard" id="Skinny1">1</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: '2'})" class="key standard" id="Skinny2">2</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: '3'})" class="key standard" id="Skinny3">3</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: '4'})" class="key standard" id="Skinny4" right="gcredeem">4</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: '5'})" class="key standard" id="Skinny5" left="Skinny5">5</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: '6'})" class="key standard" id="Skinny6">6</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: '7'})" class="key standard" id="Skinny7">7</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: '8'})" class="key standard" id="Skinny8">8</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: '9'})" class="key standard" id="Skinny9" right="gcredeem">9</a><a action="application.events.publish('keyboardselect', {caller: 'giftcardkeyboardcontrol', value: '0'})" class="key standard" down="SkinnyTopDash" id="Skinny0" left="Skinny0">0</a><a action="application.events.publish('keyboardclear', {caller: 'giftcardkeyboardcontrol'})" class="key col-2" down="SkinnyTopClear" id="SkinnyBottomClear">CLEAR</a><a action="application.events.publish('keyboardback', {caller: 'giftcardkeyboardcontrol'})" class="key col-3 key-back" down="SkinnyTopBack" id="SkinnyBottomBack" right="gcredeem">DEL</a></div>
          <div id="legal"><div id="legal">
          
          
          
        </div></div>
          <div id="confirmpopup"><div id="PurchaseConfirmationWindow">
          
        </div></div>
          <div id="ratepopup"><div id="RatePopupWindow">
          
        </div></div>
          <div id="envchangepopup"><div>
          <!-- This comment is neccessary so that the packager does not get angry -->
        </div></div>
          <div id="audiopopup"><div id="AudioPopupWindow">
          
        </div></div>
          <div id="helppanel"><div>
          <!-- This comment is neccessary so that the packager does not get angry -->
        </div></div>
          <div id="pinpopup"><div id="PinPopupWindow">
          
        </div></div>
          <div id="giftcard"><div id="giftcard">
          
        </div></div>
          <div id="changeuserpopup"><div id="ChangeUserWindow">
          
        </div></div>
          <div id="activate"><div id="ActivateContent">
          
        </div></div>
          <div id="messagepopup"><div id="MessageWindow">
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          

          
          
          
          
          
          
          
          
          
          
        </div></div>
          <div id="imagepopup"><div id="ImageWindow">
          <div id="rightArrow"> </div>
          <div id="leftArrow"> </div>
          <div id="ImageContent">
            
          </div>
          <div>
            <a action="BrowseView.ImagePopup.hide()" id="closeImagePopup">Press Enter button to close</a>
          </div>

        </div></div>
          <div id="speedpopup"><div id="SpeedPopupWindow">
          
        </div></div>
          <div id="systemstatuspopup"><div id="SystemStatusPopupWindow">
          
        </div></div>
          <div id="player"><div id="PlayerLoading">
          <div id="PlayerLogo"> </div>
          <div id="PlayerSpinner"> </div>
          <div id="PlayerLoadingProgressContainer">
            <div id="PlayerLoadingProgress"> </div>
          </div>
          <div id="PlayerLoadingTitle"> </div>
          <div id="PlayerLoadingCancel">
            <a action="application.events.publish('back', {})" class="button" id="PlayerLoadingCancelButton">Cancel</a>
          </div>
          <div id="PlayerLoadingDescription"> </div>
          <div id="SplashPoweredBy"> </div>
          <div class="SplashCopyright">© 2013 RMH All Rights Reserved.</div>
        </div><div id="PlayerLoadingResume">
          <div id="PlayerSpinnerResume"> </div>
          <div id="PlayerLoadingResumeText">Loading Video...</div>
        </div><div class="play" id="PlayerContainer">
          <div id="TransportCenter">
            <div class="trickplay white" id="TransportRW"> </div>
            <div class="trickplay white" id="TransportFF"> </div>
            <div class="trickplay white" id="TransportPause"> </div>
            <div class="trickplay white" id="TransportSkipFF"> </div>
            <div class="trickplay white" id="TransportSkipRW"> </div>
          </div>
          <div id="PlayerTop">
            <div class="white" id="VideoTitle"> </div>
            <div id="VideoSummary"> </div>
            <div id="VideoQuality" style="position: relative">
              <div id="audiotype"> </div>
              <div id="BitrateNewSD" style="position: relative"> </div>
              <div id="BitrateNewHD" style="position: relative"> </div>
              <div class="videobadges" style="position: relative">
                <div id="surround"> </div>
                <div id="HD"> </div>
              </div>
              <div id="BitrateText" style="position: relative"> </div>
              <div id="Bitrate"> </div>
              <div id="audiobadges_player">
                <span class="audiofield" id="dtsexpress51_player"> </span>
                <span class="audiofield" id="dtsexpress20_player"> </span>
                <span class="audiofield" id="dolby51_player"> </span>
                <span class="audiofield" id="dolbyplus_player"> </span>
             </div>
            </div>
          </div>
          <div id="PlayerLocateBottom">
            <div id="PlayerLocateBar">
              <span id="Trick">
                <div class="white" id="TrickRW"> </div>
                <div class="white" id="TrickFF"> </div>
                <div class="white" id="TrickSkipFF"> </div>
                <div class="white" id="TrickSkipRW"> </div>
                <div class="white" id="TrickText"> </div>
              </span>
              <div class="white" id="CurrentTime"> </div>
              <div id="TimeSpent">0:00</div>
              <div id="TimeRemain">0:00</div>
              <div id="VideoProgressBG">
                <div id="VideoStateIcon"> </div>
                <div id="VideoProgressContainer" mousedownaction="log.write('onmousedown click on VideoProgressContainer')">
                  <a action="BrowseView.PlayerControl.onLocateToPosition()" class="button" down="transportPlayPause" id="playerlocate" left="playerlocate" mousedownaction="log.write('onmousedown click on playerlocate')" pointermouseout="log.write('onmouseout on playerlocate')" right="playerlocate" up="transportPlayPause"> </a>
                  <div id="VideoProgress"> </div>
                  <div id="VideoProgressShade" mousedownaction="log.write('onmousedown click on VideoProgressShade')"> </div>
                </div>
              </div>
            </div>
            <div id="PlayerTransportBar">
              <a action="BrowseView.PlayerControl.onTransportSkipRW()" class="playerbutton" down="playerlocate" id="transportSkipRW" left="CCState" right="transportRW" up="playerlocate"> </a>
              <a action="BrowseView.PlayerControl.onTransportRW()" class="playerbutton" down="playerlocate" id="transportRW" left="transportSkipRW" right="transportPlayPause" up="playerlocate"> </a>
              <a action="BrowseView.PlayerControl.onTransportPlayPause()" class="playerbutton" down="playerlocate" id="transportPlayPause" left="transportRW" right="transportStop" up="playerlocate"> </a>
              <a action="BrowseView.PlayerControl.onTransportStop()" class="playerbutton" down="playerlocate" id="transportStop" left="transportPlayPause" right="transportFW" up="playerlocate"> </a>
              <a action="BrowseView.PlayerControl.onTransportFF()" class="playerbutton" down="playerlocate" id="transportFW" left="transportStop" right="transportSkipFW" up="playerlocate"> </a>
              <a action="BrowseView.PlayerControl.onTransportSkipFF()" class="playerbutton" down="playerlocate" id="transportSkipFW" left="transportFW" right="CCState" up="playerlocate"> </a>
            </div>
            <div id="ClosedCaptionIcon">
              <a action="BrowseView.PlayerControl.onClosedCaptionToggle()" class="CCUnavailableOff" down="playerlocate" id="CCState" left="transportSkipFW" pointerfocus="BrowseView.PlayerControl.focusClosedCaptionToggle()" right="transportSkipRW" up="playerlocate"> </a>
            </div>
          </div>
          <div id="ClosedCaption">
            <div id="TimedTexts"><div id="TimedText0"> </div><div id="TimedText1"> </div><div id="TimedText2"> </div><div id="TimedText3"> </div></div>
          </div>
        </div><a id="playerctl"> </a></div>
        </div>
      </div></div>
			<div id="offscreenMeasurements">
				<div id="metaContentGrid"></div>
				<span id="ruler"></span>
			</div>
        </div>	
        <div id="debugger"> </div>
        <object id="PlayerObject" classid="clsid:SAMSUNG-INFOLINK-PLAYER"></object>	
		<OBJECT id="pluginObjectTVMW" border=0 classid="clsid:SAMSUNG-INFOLINK-TVMW" class="ssctl"></OBJECT>
		<OBJECT id="audioPlugin" border=0 classid="clsid:SAMSUNG-INFOLINK-AUDIO" class="ssctl"></OBJECT>
        <object id="pluginObjectNNavi" border="0" classid="clsid:SAMSUNG-INFOLINK-NNAVI" class="ssctl"></object>
		<object id="pluginObjectNetwork" border="0" classid="clsid:SAMSUNG-INFOLINK-NETWORK" class="ssctl"></object>
		<object id="wvPlugin" border="0" classid="clsid:SAMSUNG-INFOLINK-EXTERNALWIDGETINTERFACE" class="ssctl"></object>
		<object id="downloadPlugin" border="0" classid="clsid:SAMSUNG-INFOLINK-DOWNLOAD" class="ssctl"></object>
        <object id="pluginObjectScreen3D" border=0 width=0 height =0 classid="clsid:SAMSUNG-INFOLINK-SCREEN" class="ssctl"></object> 
        <object id="pluginTv" border=0 width=0 height =0 classid="clsid:SAMSUNG-INFOLINK-TV" class="ssctl"></object>
        <object id="pluginDevice" border=0 width=0 height =0 classid="clsid:SAMSUNG-INFOLINK-DEVICE" class="ssctl"></object> 
		<OBJECT id="pluginObjectFrontPanel" border=0 classid="clsid:SAMSUNG-INFOLINK-FRONTPANEL" class="ssctl"></OBJECT>
	</body>
</html>
###################################################################
# 
#    Maple Key-Configuration File
# 
###################################################################

# DONOT use just the name with just one character for function key

Keyboard Key Map

#	Power		=	KEY_COMMA
	76 : KEY_COMMA

#	TV	 		=	KEY_DOT
	77 : KEY_DOT

#	ON/OFF		=	Can't receive this key event

#	1			=	KEY_1
	101 : KEY_1

#	2	 		=	KEY_2
	98 : KEY_2

#	3	 		=	KEY_3
	6 : KEY_3

#	4	 		=	KEY_4
	8 : KEY_4

#	5	 		=	KEY_5
	9 : KEY_5

#	6	 		=	KEY_6
	10 : KEY_6

#	7	 		=	KEY_7
	12 : KEY_7

#	8	 		=	KEY_8
	13 : KEY_8

#	9	 		=	KEY_9
	14 : KEY_9

#	-	 		=	KEY_MINUS
	35 : KEY_MINUS

#	0	 		=	KEY_0
	17 : KEY_0

#	PRE-CH		=	KEY_F11
	259 : KEY_F11

#	VOL +		=	KEY_F1
	7 : KEY_F1

#	VOL -		=	KEY_F2
	11 : KEY_F2

#	CH +		=	KEY_F3
	68 : KEY_F3

#	CH -		=	KEY_F4
	65 : KEY_F4

#	MUTE		=	KEY_F5
	27 : KEY_F5

#	SOURCE		=	KEY_F6
	222 : KEY_F6

#	CHLIST		=	KEY_F7
	84 : KEY_F7

#	MENU		=	KEY_F8
	262 : KEY_F8

#	W.LINK		=	KEY_F9
	115 : KEY_F9

#	TOOLS		=	KEY_F10
	75 : KEY_F10

#	RETURN		=	KEY_BACKSPACE
	88 : KEY_BACKSPACE

#	UP	 		=	KEY_ARROW_UP
	29460 : KEY_ARROW_UP

#	DOWN		=	KEY_ARROW_DOWN
	29461 : KEY_ARROW_DOWN

#	LEFT	 		=	KEY_ARROW_LEFT
	4 : KEY_ARROW_LEFT

#	RIGHT		=	KEY_ARROW_RIGHT
	5 : KEY_ARROW_RIGHT

#	WHEEL DOWN	=	KEY_PAGEDN
	29469	 : KEY_PAGEDN

#	WHEEL UP	=	KEY_PAGEUP
	29468 : KEY_PAGEUP

#	ENTER		=	KEY_ENTER
	29443 : KEY_ENTER

#	INFO	 	=	KEY_TAB
	31 : KEY_TAB

#	EXIT	 		=	KEY_ESC
	45 : KEY_ESC

#	RED	 		=	KEY_R
	108 : KEY_R

#	GREEN	 	=	KEY_G
	20 : KEY_G

#	YELLOW	 	=	KEY_Y
	21 : KEY_Y

#	BLUE	 	=	KEY_B
	22 : KEY_B

#	CC	 		=	KEY_Q
	118 : KEY_Q

#	INFO.L	 	=	KEY_W
	147 : KEY_W

#	DMA	 		=	KEY_E
	 260	 : KEY_E

#	E.MODE	 	=	KEY_A
	148 : KEY_A

#	CONTENT	 	=	KEY_S
	261 : KEY_S

#	FAV.CH		=	KEY_D
	256 : KEY_D

#	RW	 		=	KEY_U
	69 : KEY_U

#	PAUSE	 	=	KEY_I
	74 : KEY_I

#	FF	 		=	KEY_O
	72 : KEY_O

#	REC	 		=	KEY_J
	192 : KEY_J

#	PLAY	 	=	KEY_K
	71 : KEY_K

#	STOP	 	=	KEY_L
	70 : KEY_L

#	FF_	 		=	KEY_P
	1078 : KEY_P

#	RW_	 		=	KEY_T
	1080 : KEY_T

#	11        	= KEY_C
	73 : KEY_C

#	REPEAT        	= KEY_H
	78 : KEY_H

#	TTX_MIX        	= KEY_F
	650 : KEY_F

#	DISC_MENU        	= KEY_M
	1086 : KEY_M

#	12        	= KEY_N
	1057 : KEY_N

#	3D        	= KEY_V
	1219 : KEY_V

#	SUB_TITLE      = KEY_X
	1089 : KEY_X

#	QUICK_REPLAY       	= KEY_Z
	1236 : KEY_Z

#	KEY_PANNEL_POWER	= KEY_PAD_0
	614 : KEY_PAD_0
	
#	KEY_PANNEL_CHUP	= KEY_PAD_1
	105 : KEY_PAD_1
	
#	KEY_PANNEL_CHDOWN	= KEY_PAD_2
	106 : KEY_PAD_2
	
#	KEY_PANNEL_VOLUP	= KEY_PAD_3
	203 : KEY_PAD_3
	
#	KEY_PANNEL_VOLDOWN= KEY_PAD_4
	204 : KEY_PAD_4
	
#	KEY_PANNEL_ENTER	= KEY_PAD_5
	309 : KEY_PAD_5
	
#	KEY_PANNEL_MENU	= KEY_PAD_6
	613 : KEY_PAD_6
	
#	KEY_PANNEL_SOURCE	= KEY_PAD_7
	612 : KEY_PAD_7

#	KEY_TTX_MIX		= KEY_PAD_8
	650 : KEY_PAD_8

#	KEY_GUIDE		= KEY_PAD_9
	651 : KEY_PAD_9

#	KEY_SUBTITLE	= KEY_PAD_STAR
	652 : KEY_PAD_STAR

#	KEY_ASPECT		= KEY_PAD_PLUS
	653 : KEY_PAD_PLUS

#	KEY_DOLBY_SRR	= KEY_PAD_MINUS
	654 : KEY_PAD_MINUS

#	KEY_MTS        	= KEY_PAD_DOT
	655 : KEY_PAD_DOT

#	D_KEY_FRONT_PLAY       	= KEY_PAD_SLASH
	71 : KEY_PAD_SLASH

	
# To use new key code, remove comment char 

#	29443 : KEY_ENTER
#	29460 : KEY_ARROW_UP
#	29461: KEY_ARROW_DOWN
#	22 : KEY_B
#	29468 : KEY_PAGEUP
#	29469 : KEY_PAGEDN
﻿//-----------------------------------------------------------------------------
// application.js
// Copyright (c) 2012 - 2013, Rovi Corporation.  All rights reserved.
//-----------------------------------------------------------------------------
 
/**
 * @author tjmchattie
 */
var application = {
	DEBUG: false,
	_methodMap: {},
	_views: {},
	id: 'application',
	currentView: null,
	keys: null,
	navigator: navigation,
	utility: utility,
	ui: ui,
	playbackSupported: false,
	authSupported: false,
	element: element,
	apiUrl: '',  // pjv: to move to webservices.js?
	endPointServer: '',  // pjv: to move to webservices.js?
	isBusy: false,
	isLoaded: false,
	isConnected: true,
	DataDirectory: '',
	EndPoints: {},  // pjv: to move to webservices.js?
	Environments: [],  // pjv: to move to webservices.js?
	CurrentEnvironment: '',  // pjv: to move to webservices.js?
	LastKeyDown: new Date(),
	RepeatKeyBlock: false,
	RepeatKeyBlockDuration: 300,
	TempKeyBlock: false,
	TempKeyBlockDuration: 1000,
    TempKeyBlockEnter: false,
	firmwareIsValid: true,
	request: $get(),
	regionError: null,
	debugMode: false,
	doNotRestoreSettings: false,
	remotelog: '',
    blockWidgetAccess: false,
    cachedUserAgent: null,  // pjv: to move
	appSetting: function(key){
		var val = -1;
		
		if($cn.config) {
			if(key in $cn.config){
				val = $cn.config[key];
			}
		}
		
		return val;
	},	
	// pjv: should this go to webservices.js?
	// setupApiKeys :to select proper credential according to given cid,
	// If cid is empty or not exsited, it will use default credential instead.
	setupApiKeys: function(cid){

        log.write("setupApiKeys: called with cid of " + cid);
        if(!cid) {
            cid = $UrlQueryString['CountryID'] || $cn.config.DefaultSelectedCountry;
        }
        
        var cred_cid = configuration.getCredentialsCountryID();
        log.write("setupApiKeys: credentials country id: " + cred_cid);
        
        // No CredentialsFilePath specified, set application error
        if(cred_cid === -1) {
            application.ApplicationError = {
                type: application.resource["system_messages"].application_error.MessageType,
                Message:application.resource["system_messages"].application_error.Message,
                Close: application.resource["system_messages"].application_error.Close,
                callback: function(){
                    application.exit();
                }
            };
        }
        if(cred_cid != cid) {
            // Need to make configuration reload new credentials file
            log.write("setupApiKeys: attempt load of alternate credentials");
            var credentialExsited = configuration.changeCredentials(cid);
            if (!credentialExsited) {
            	configuration.changeCredentials($UrlQueryString['CountryID'] || $cn.config.DefaultSelectedCountry);
            }
        }
        log.write("setupApiKeys: CID " + cid + " credentials loaded.");
        
        webservices.apiKey = configuration.readValue("APIKey");
        webservices.destType = configuration.readValue("DestinationTypeID");
        log.write("setupApiKeys: APIKey: [" + webservices.apiKey + "]  DesinationTypeID: [" + webservices.destType + "]");
	},
	init: function(){
        var f,
            fileObj,
            isPathValid,
            jsFileClose,
            jsFile,
			self = this,
            d2dTitle;
		log.write("application.init: Enter");
		
        this.keys = new Common.API.TVKeyValue();
		
		//Setup exception categories. These are used to map to resource sections. The purpose is to allow messages to be targeted to the page you are currently on.
		this.exception.categories["browse-view"] = "store_messages";
		this.exception.categories["search-view"] = "system_messages";
		this.exception.categories["wishlist-view"] = "system_messages";
		this.exception.categories["library-view"] = "system_messages";
		this.exception.categories["settings-view"] = "system_messages";
		this.exception.categories["titleview"] = "system_messages";
		this.exception.categories["help-view"] = "system_messages";
		this.exception.categories["player-view"] = "player_messages";
		this.exception.categories["checkout-view"] = "checkout_messages";
		
        $cn.data.SoftwareVersion = configuration.readValue("version");
		
		//Setup initial API Keys
		// application.setDeviceYear(); // Now have device.getFirmwareYear()
		// application.setDeviceType(); // Now have device.getDeviceType()
		// application.setDeviceSoc(); // Now have device.setDeviceSoc() called in device initialization
	
		if($cn.config.OnScreenDebugLog){
			$('debugger').show();
		}
		
		/* See if an authentication file exists and set the default variables. */
		device.initPlayer();
		if(application.authSupported) {
            var s = null;
			
            //Only when RegionCheckEnabled's value is false, we disabled regioncheck funtion
            if (configuration.readValue('RegionCheckEnabled') == false) {
            	$cn.data.RegionCheckEnabled = false;
            }
            
            $cn.data.SelectedCountryID = configuration.readValue('SelectedCountryID');

    		// Have to call setupApiKeys after loading auth items from persisted storage, so we start with correct country and region ids.
    		application.setupApiKeys($cn.data.SelectedCountryID);
    		
    		if (!$cn.data.RegionCheckEnabled) { // RegionCheck is disabled use default country instead
    			application.setupApiKeys($UrlQueryString['CountryID'] || $cn.config.DefaultSelectedCountry);
    		}
    		
			s = configuration.readValue(configuration.getPrefixedSettingKey('auth'));

			$cn.data.ShowWelcomeScreen = configuration.readValue(configuration.getPrefixedSettingKey('welcome')) || false;
			$cn.data.DeviceID = webservices.uniqueId = (configuration.readValue('DestinationUniqueID') || $cn.config.DeviceID);
			
			//Preferred audio type is the currently saved audio type. prefferedaudiotypeset is whether or not the user has specifically 
			//chosen one. This is what we queue off of to show the audio setup message at playback.
			$cn.data.PreferredAudioType = configuration.readValue(configuration.getPrefixedSettingKey('PreferredAudioType')) || $cn.data.PreferredAudioType;				
			$cn.data.PreferredAudioTypeSet = $cn.utilities.isTrue(configuration.readValue(configuration.getPrefixedSettingKey('PreferredAudioTypeSet')));

			//Read authToken related information.
			if(s !== null)
            {
				$cn.data.AuthToken = s.authToken;
				$cn.data.DeviceName = s.deviceName;
				$cn.data.UserEmailAddress = s.emailAddress;
                $cn.data.AdultPinEnabled = $cn.utilities.isTrue(s.adultPinEnabled);
                $cn.data.ParentPinEnabled = $cn.utilities.isTrue(s.parentPinEnabled);
                $cn.data.PurchasePinEnabled = $cn.utilities.isTrue(s.purchasePinEnabled);
                $cn.data.ParentalControlsConfigured = $cn.utilities.isTrue(s.parentalControlsConfigured);
				
                if($cn.utilities.isTrue(s.parentPinEnabledOnStartup)) {
                    $cn.data.ParentPinEnabledOnStartup = $cn.utilities.isTrue(s.parentPinEnabledOnStartup);
				}
				
				//Print configurations
				if (this.DEBUG) log.write('application.init: AuthToken: ' + s.authToken);
				if (this.DEBUG) log.write('application.init: DeviceName: ' + s.deviceName);
				if (this.DEBUG) log.write('application.init: DeviceID: ' + s.deviceId);
				if (this.DEBUG) log.write('application.init: UserEmailAddress: ' + s.emailAddress);
				if (this.DEBUG) log.write('application.init: AdultPinEnabled: ' + s.adultPinEnabled);
				if (this.DEBUG) log.write('application.init: ParentPinEnabled: ' + s.parentPinEnabled);
				if (this.DEBUG) log.write('application.init: PurchasePinEnabled: ' + s.purchasePinEnabled);
				if (this.DEBUG) log.write('application.init: ParentalControlsConfigured: ' + s.parentalControlsConfigured);
				if (this.DEBUG) log.write('application.init: ParentPinEnabledOnStartup: ' + s.parentPinEnabledOnStartup);
			}
		}
		
        self.resolveEnv(self.firstResolveEnvCallback.bind(self));
    },
    firstResolveEnvCallback : function(obj){
        var self = this;
        log.write('Resolving environment...');

		/* Configure API Urls and end point urls */
		var result = obj.data.result;
		self.CurrentEnvironment = configuration.readValue("CustomEndPoint") || self.appSetting('CustomEndPoint') || result.defaultKey;
		self.endPointServer = self.CurrentEnvironment + ".cinemanow.com";
		for(var i = 0; i < result.enviroSelectable.length; i++) {
			//if(result.enviroSelectable[i].keyName == result.defaultKey) {
			if(result.enviroSelectable[i].keyName == self.CurrentEnvironment) {
				self.apiUrl = result.enviroSelectable[i].keyUrl;
				//self.endPointserver = self.apiUrl.match(/:\/\/(.[^/]+)/)[1];
			}
		}
		// Can not match the keyUrl from getDeviceEnv response? Set the apiUrl according to CustomEndPoint.
		if(!self.apiUrl){
			self.apiUrl = "https://" + self.CurrentEnvironment + ".cinemanow.com";
		}
		
		$cn.data.apiUrl  = self.apiUrl;			
		log.write('Current API URL: ' + self.apiUrl);
		
		/* Build configurable Environments */
		envs = 0;
		self.Environments = [];
		result.enviroSelectable.each(function(env){
			self.Environments[envs] = {
				key: env.keyName,
				name: env.keyValue,
				url: env.keyUrl
			};
			envs++;
		});
		
		/* Build End Points */
		result.endPoints.each(function(ep){
			self.EndPoints[ep.keyName] = ep.keyValue;
		});

        // UV endpoints are set by getDeviceEnv now. 2013/04/12
        // Override UV endpoints
        // TODO: set this up dynamically when necessary
        /*if ($cn.config.EnableUV) {
            self.EndPoints['library'] = $cn.data.UvEndpoints.library;
            self.EndPoints['stream'] = $cn.data.UvEndpoints.stream;
            // not working - 2012/11/12 - self.EndPoints['auth'] = $cn.data.UvEndpoints.auth;
        }*/

        /* Should not let mock API methods going into production.
		// If auth not supported, call InitAuthMethodOverrides to setup for it.
		if(!application.authSupported)
			initAuthMethodOverrides(); */
		
		log.write('Setting up device...');
		/* Run the widget setup command */
		
		var lastCacheTime = configuration.readValue('LastCacheTime'); // Read last cache time from current creadential.
		if (lastCacheTime === null) {
		    lastCacheTime = "";
		}
		//We need to call setup device the first time with the current selectedcountryid. If for some reason they do not match then we will call it again with the updated apikeys
		$cn.methods.setupDevice(lastCacheTime, true, function(callback){

			var r = callback.data.result,
				reload,
				c;

			// Check if the country and region have changed since last run.
			self.checkRegion(r);

			//Call setup device again to retrieve the loaded data.
			$cn.methods.setupDevice(lastCacheTime, false, function(callback){
			log.write(" Token is " +($cn.utilities.getMeta("AuthTokenActive", r.configValues) == "True"));
				var firmware;
				//log.write(callback);
				if(callback && callback.data && callback.data.result) {
				    self.setSetupData(callback.data.result);
					
					//Do Basic firmware checks and set classname.
					application.firmwareIsValid = device.setDocumentClassName();	
					
					if(application.firmwareIsValid) {

						if(!$cn.data.SystemOffline) {
						
						    var rest = function() {
							    /* If an auth token is set and it is not active. Delete it and set appropriate variables */
							    if($cn.data.AuthToken.length > 0 && !$cn.data.AuthTokenActive && application.authSupported) { 								
								    self.clearAuthToken();
							    }
    							
							    if($cn.data.RegionCheckEnabled) {
								    var hasCredential = configuration.changeCredentials($cn.data.CountryID);
								    if (!hasCredential && !self.regionError) {
									    // User not in allowed regions THROW ERROR
									    self.regionError = 	{
										    type: application.resource["system_messages"].region_moved_notallowed.MessageType,
										    Message:application.resource["system_messages"].region_moved_notallowed.Message,
										    Content: application.resource["system_messages"].region_moved_notallowed.Content,
										    Close: application.resource["system_messages"].region_moved_notallowed.Close,
										    callback: function(){
											    application.exit();
										    }
									    };
								    }
    								
							    }
    							
							    if(self.regionError) {
								    application.ui.init();
							    }
							    else if(!self.regionError || application.appSetting('IsCesDemo')) {
							        self.buildInitialNav();
							    }
							    else {
								    $('SplashProgressContainer').hide();
								    $('loadingerrormsg').innerHTML = regionError;
								    $('loadingerror').show();
								    navigation.setFocus('exitbtn');
							    }
						    };
						
						    // Flush the content cache if the response value says we should.
						    if ($cn.data.ShouldUpdateCache) {
						        webservices.clearContentCache(rest);
						    } else {
						        rest.call();
						    }
						    
						}
						else {
							$('SplashProgressContainer').hide();
							$('loadingerrormsg').innerHTML = $cn.data.SystemUnavailableMessage;
							$('loadingerror').show();
							navigation.setFocus('exitbtn');
						}
					}
					else {
						$('SplashProgressContainer').hide();
						$('loadingerrormsg').innerHTML = "Please update software in order to enjoy some of our new and exciting features or Apps.<br /><br />Simply go to MENU, SUPPORT, and SOFTWARE UPGRADE.";
						$('loadingerror').show();
						navigation.setFocus('exitbtn');
					}
				}
				else {
					application.events.publish("error", {type: "system_error" });
				}
			});
		});
		
        // TODO: this is wrong - we need to find out from SS / Rovi how to determine this: #11264
        // JN: This likely happens before the setupDevice call above finishes. Is that acceptable?
        if(application.request.data && $cn.config.EnableD2D && $cn.config.DeviceD2DEnabled){
            $cn.data.d2dPath = true;
            d2dTitle = application.request.data.split("|");

            $cn.data.d2dTitleInfo.id = d2dTitle[0];
            $cn.data.d2dTitleInfo.validDisc = d2dTitle[1];
            $cn.data.d2dTitleInfo.rental = d2dTitle[2];

            $cn.methods.getUpgradeOffers(d2dTitle[0], function(result){
                log.debug(JSON.stringify(result));
                if(result.responseMessage ==="success" && result.products.length > 0){
                    $cn.data.d2dTitleOffers = {
                        'availableOffers': result.products
                    };
                } else {
                    //set to invalid since no offers came back. IF not we will error out.
                    $cn.data.d2dTitleInfo.error = true;
                }
                log.write($cn.data.d2dTitleInfo.id);
                log.write($cn.data.d2dTitleInfo.id);
                log.write($cn.data.d2dTitleInfo.id);
                log.write($cn.data.d2dTitleInfo.id);

                log.write("GET UPGRADE OFFERS RETURNED. Proceeding with setup");
                log.write(JSON.stringify($cn.data.d2dTitleOffers));
                self.navigationSetup();
            });
        } else {
            log.write("NO d2d info. Proceeding with setup");
            this.navigationSetup();
        }
    },
    checkRegion: function(r) {
        var defaultCountryID = $UrlQueryString['CountryID'] || $cn.config.DefaultSelectedCountry;
        $cn.data.SelectedCountryID = configuration.readValue('SelectedCountryID'); // Read Selected Country from current creadential.
        var setupDeviceCountryID = $cn.utilities.getMeta("CountryID", r.configValues);
        
		if ($cn.data.RegionCheckEnabled) {
			if (!$cn.data.SelectedCountryID) { // First time run. No SelectedCountryID.
				if (setupDeviceCountryID != defaultCountryID) { // Current CountryID is different from DefaultCountryIDID
				    var hasCredential = configuration.changeCredentials(setupDeviceCountryID);
                    if (hasCredential) {
    					log.write('application.firstResolveEnvCallback: region_notdefault');
					    application.regionError = 	{
							    type: application.resource["system_messages"].region_notdefault.MessageType,
							    Message:application.resource["system_messages"].region_notdefault.Message,
							    Content: application.resource["system_messages"].region_notdefault.Content,
							    OK: application.resource["system_messages"].region_notdefault.OK,
							    Close: application.resource["system_messages"].region_notdefault.Close,
							    callback: function(val){
								    if(val){
									    application.exit();
								    }
								    else {
									    configuration.writeValue('SelectedCountryID', setupDeviceCountryID);
									    location.reload(true);
								    }	
							    }
					    };
					}
					else {
    					log.write('application.firstResolveEnvCallback: region_error');
					    application.regionError = 	{
							    type: application.resource["system_messages"].region_error.MessageType,
							    Message:application.resource["system_messages"].region_error.Message,
							    Close: application.resource["system_messages"].region_error.Close,
							    callback: function(val){
									    application.exit();
							    }
					    };
					} 
				} 
				else {
					configuration.writeValue('SelectedCountryID', setupDeviceCountryID);
				}
			} else if (setupDeviceCountryID != $cn.data.SelectedCountryID) { // Not first time run. Compare the SelectedCountryID with currentID
			    var hasCredential = configuration.changeCredentials(setupDeviceCountryID);
			    if (hasCredential) {
    			    application.regionError = 	{
    					type: application.resource["system_messages"].region_moved.MessageType,
    					Message:application.resource["system_messages"].region_moved.Message,
    					Content: application.resource["system_messages"].region_moved.Content,
    					OK: application.resource["system_messages"].region_moved.OK,
    					Close: application.resource["system_messages"].region_moved.Close,
    					callback: function(val){
    						if(val){
    							application.exit();
    						}
    						else {
    							configuration.writeValue('SelectedCountryID', setupDeviceCountryID);
    							location.reload(true);
    						}												
    					}
    				};
			    } else {
                    log.write('application.firstResolveEnvCallback: region_error');
                    application.regionError =   {
                            type: application.resource["system_messages"].region_error.MessageType,
                            Message:application.resource["system_messages"].region_error.Message,
                            Close: application.resource["system_messages"].region_error.Close,
                            callback: function(val){
                                    application.exit();
                            }
                    };
			    }
			} else {
				configuration.writeValue('SelectedCountryID', setupDeviceCountryID);
			}
		} else {
			configuration.writeValue('SelectedCountryID', setupDeviceCountryID);
		}
    },
    buildInitialNav: function(){
	    /* Build the initial navigation */
	    $cn.methods.getNav(function(callback){
		    var parentId,
			    rootMaster,
			    slaveMaster;
		    /* Build Nav Here */

		    if(callback && callback.data && callback.data.result) {
			    $cn.data.Navigation = callback.data.result;
			    $cn.data.slaveWheel = {};
			    $cn.data.masterWheel = [];
			    parentId = rootMaster = slaveMaster = 0;
			    $cn.data.recommendedGenres = [];
    			
			    callback.data.result.genres.each(function(genre){
    				
				    if(genre.visible){
                        if (!$cn.data.jinniEnable && (genre.name == "Recommended For You" || genre.name == "Movies by Mood" || genre.name == "TV Shows By Mood")){
                            return;//Do not push to the wheel.
                        }
				        
					    if(genre.parentId == 0) {
						    parentId = genre.iD;												
					    }
    					
					    if(genre.parentId == parentId){
						    $cn.data.masterWheel[$cn.data.masterWheel.length] = genre;	
    						
						    if(rootMaster == 0) {
							    rootMaster = genre.iD;
						    }
					    }
					    else {
    						
						    if(!$cn.data.slaveWheel[genre.parentId]) {
							    $cn.data.slaveWheel[genre.parentId] = [];
						    }
    						
						    $cn.data.slaveWheel[genre.parentId].push(genre);	
    						
						    //Loop recommended genres and match the genres to the parent grouping. This is needed for the my videos implementation
						    $cn.data.RecomendedGenreIds.each(function(g){
							    if(g == genre.iD){
								    $cn.data.masterWheel.each(function(m){
									    if(m.iD == genre.parentId){
										    $cn.data.recommendedGenres[$cn.data.recommendedGenres.length] = {id: m.iD, parentname: m.name, name: genre.name, genreid: g};																	
									    }
								    });
							    }
						    });
    						
						    if(slaveMaster == 0 && rootMaster > 0 && rootMaster == genre.parentId) {
							    slaveMaster = genre.iD;
						    }
					    }
				    }
			    });

		    }
    		
		    $cn.methods.getTitlesByGenreId($cn.data.slaveWheel[$cn.data.masterWheel[0].iD][0].iD, 1, function(){
                var i;

			    log.debug("Merch config: " + $cn.data.EnableMerchPage);
    			
			    if($cn.config.EnableMerch) {
				    //Get Merchandising data
				    $cn.methods.getMerchandize(function(result){
                        var collectionId, badId = [];
    					
					    if(result) {
						    //Test to see if data was returned from merch service to determine if the merch page should be displayed or not
						    log.debug("Merch valid?" +  $cn.data.Merch.newMovies.length + ', '+ $cn.data.Merch.newTVShows.length + ", " + $cn.data.Merch.featuredPromotion.titleID);

						    // Check validity of merch response:
						    if( $cn.data.Merch.newMovies.length > 0 &&
							    $cn.data.Merch.newTVShows.length > 0 &&
							    $cn.data.Merch.newCollections &&
							    $cn.data.Merch.featuredPromotion.titleID &&
							    $cn.data.Merch.featuredPromotion.titleID > 0 &&
							    $cn.data.Merch.featuredPromotion.boxartPrefix &&
							    $cn.data.Merch.featuredPromotion.name) {

                                collectionId = [];
                                // If only 1 new collection
                                if ($cn.data.Merch.newCollections.genreID) {
                                    collectionId[0] = $cn.data.Merch.newCollections.genreID;
                                } else {
                                    for (i = 0; i < $cn.data.Merch.newCollections.length; ++i) {
                                        collectionId[i] = $cn.data.Merch.newCollections[i].genreID;
                                    }
                                }

                                // Assume we are okay until proven otherwise
                                $cn.data.EnableMerchPage = true;

						    } else {
							    log.write("=== getMerchandize data is incomplete - Cannot show Merch Page ===");
							    $cn.data.EnableMerchPage = false;
						    }
					    } else {
						    log.write("=== No getMerchandize Result returned - Cannot show Merch Page ===");
						    $cn.data.EnableMerchPage = false;
					    }
    					
					    application.ui.init();	
				    });
			    }
			    else {
				    //Merch not configured for this client so init the app
				    $cn.data.EnableMerchPage = false;
				    application.ui.init();
			    }
		    });
    		
	    });							
    },
    setSetupData: function(r){
		$cn.data.SessionId = r.sessionID;
		$cn.data.jinniEnable = ($cn.utilities.getMeta("JinniEnable", r.configValues) == "True");
        log.write("setupDevice return: jinniEnable: " + $cn.data.jinniEnable);
		$cn.data.flixsterEnable = ($cn.utilities.getMeta("FlixsterEnable", r.configValues) == "True");
        log.write("setupDevice return: flixsterEnable: " + $cn.data.flixsterEnable);
		$cn.data.baselineEnable = ($cn.utilities.getMeta("BaselineEnable", r.configValues) == "True");
        log.write("setupDevice return: baselineEnable: " + $cn.data.baselineEnable);
		$cn.data.ImageLoadTest = $cn.utilities.getMeta("ImageLoadTest", r.configValues);
		$cn.data.ParentalControlsConfigured = ($cn.utilities.getMeta("ParentalControlsConfigured", r.configValues) == "True");
		// Purchase pin is controlled on a device per device basis.
        //$cn.data.PurchasePinEnabled = ($cn.utilities.getMeta("PurchasePinEnabled", r.configValues) == "True"); /* User has parent pin enabled, some ratings may be filtered at the server. Show option to input parent pin if enabled. */
		$cn.data.AdultPinEnabled = ($cn.utilities.getMeta("AdultPinEnabled", r.configValues) == "True"); /* Do not allow user to enter lifestyle store without prompting for pin. */
		$cn.data.LastCacheLoadTimeUTC = $cn.utilities.getMeta("LastCacheLoadTimeUTC", r.configValues); /* Last time in UTC when server side cache was reloaded. */
		configuration.writeValue('LastCacheTime', $cn.data.LastCacheLoadTimeUTC);

		$cn.data.ShouldUpdateCache = ($cn.utilities.getMeta("ShouldUpdateCache", r.configValues) == "True"); /* Calculate based on input if local cache should be purged. */
		$cn.data.CountryID = $cn.utilities.getMeta("CountryID", r.configValues); /* Country ID for the current client request. */
		$cn.data.Region = $cn.utilities.getMeta("RegionCode", r.configValues); //88 is US
		$cn.data.AllowedRegions = $cn.utilities.getMeta("AllowedRegions", r.configValues).split(',');
		$cn.data.AffId = $cn.utilities.getMeta("AffId", r.configValues); /* Aff ID for the current client request. */
		$cn.data.EnableAccountLink = $cn.utilities.getMeta("EnableAccountLink", r.configValues); /* Used in the settings panel to turn on and off the linking feature */
		$cn.data.AccountLinkUrl = $cn.utilities.getMeta("Account_Link_URL", r.configValues); /* Used in the settings panel to turn on and off the linking feature */
		$cn.data.ActivationURL = $cn.config.ActivationURL || $cn.utilities.getMeta("ActivationURL", r.configValues); /* Custom activation URL configurable at server. (when applies) */
		$cn.data.DisplayEula = ($cn.utilities.getMeta("DisplayEula", r.configValues) == "True"); /* If enabled user has not accepted eula, please display. use getEulaText to load text to display. */
		$cn.data.ShouldEnableTvNode = ($cn.utilities.getMeta("ShouldEnableTvNode", r.configValues) == "True"); /* Notes if TV is approved for this device. */
		$cn.data.BandwithCheckURL = $cn.utilities.getMeta("BandwithCheckURL", r.configValues); /* http link to file to be used for testing bandwidth on device. */
		$cn.data.BandwithCheckURLSize = $cn.utilities.getMeta("BandwithCheckURLSize", r.configValues); /* http link to file to be used for testing bandwidth on device. */
		$cn.data.AuthTokenActive = ($cn.utilities.getMeta("AuthTokenActive", r.configValues) == "True"); /* If auth token present in header it will be checked to verify it is active. */
		$cn.data.SystemOffline = ($cn.utilities.getMeta("SystemOffline", r.configValues) == "True"); /* If set to True, display message at startup. */
		$cn.data.SystemUnavailableMessage = $cn.utilities.getMeta("SystemUnavailableMessage", r.configValues); /* Message to display in the case of system offline. */
		$cn.data.SessionLimitRows = $cn.utilities.getMeta("SessionLimitRows", r.configValues);  /* Number of rows to record before forcing save session. */
		$cn.data.SessionLimitMinutes = $cn.utilities.getMeta("SessionLimitMinutes", r.configValues); /* Number of minutes to wait before forcing save session. */
		$cn.data.AllowAdult = ($cn.utilities.getMeta("AllowAdult", r.configValues) == "True"); /* Allow display of adult store. */
		$cn.data.AllowPlayboy = ($cn.utilities.getMeta("AllowPlayboy", r.configValues) == "True"); /* Allow display of playboy stores */
		$cn.data.RootMoodGenreID = $cn.utilities.getMeta("RootMoodGenreID", r.configValues); /* Used as the parent id for the main wheel */
		$cn.data.TVRootMoodGenreID = $cn.utilities.getMeta("TVRootMoodGenreID", r.configValues); /* Used as the parent id for the main wheel */
		$cn.data.RecomendedGenreIds = $cn.utilities.getMeta("RecomendedGenreIds", r.configValues).split(','); /* Used as the parent id for the main wheel */
		
        $cn.config.EnableUV = $cn.utilities.isTrue($cn.utilities.getMeta("UVEnabled", r.configValues));

		/* Load Custom Preferences */
        if($cn.utilities.isTrue($cn.utilities.getMeta("DolbyEnable", r.configValues))) {
			$cn.data.AllowedAudioProfiles[$cn.data.AllowedAudioProfiles.length] = "Dolby_Digital_Plus_51";
			$cn.data.Dolby51Enable = true;
		}
        /* DTS is not supported now */
        /*if($cn.utilities.isTrue($cn.utilities.getMeta("DTSEnable", r.configValues))) {
			$cn.data.AllowedAudioProfiles[$cn.data.AllowedAudioProfiles.length] = "DTS_Express_51";
			$cn.data.DTS51Enable = true;
		}*/
        
        if($cn.utilities.isTrue($cn.utilities.getMeta("DolbyStereoEnable", r.configValues))) {
			$cn.data.AllowedAudioProfiles[$cn.data.AllowedAudioProfiles.length] = "Dolby_Digital_Plus_Stereo";
			$cn.data.DolbyStereoEnable = true;
		}
        
        /*if($cn.utilities.isTrue($cn.utilities.getMeta("DTSStereoEnable", r.configValues))) {
			$cn.data.AllowedAudioProfiles[$cn.data.AllowedAudioProfiles.length] = "DTS_Express_Stereo";
			$cn.data.DTSStereoEnable = true;
		}*/
        
        if($cn.data.PreferredAudioType == '' ){
        	var bDolbyEnable = $cn.data.Dolby51Enable ||$cn.data.DolbyStereoEnable;
        	var bDTSEnable = $cn.data.DTS51Enable ||$cn.data.DTSStereoEnable;
        	
        	$cn.data.PreferredAudioType = 'Stereo_Standard';
          	
        	if(bDolbyEnable && !bDTSEnable){
        		if($cn.data.Dolby51Enable)
        			$cn.data.PreferredAudioType = 'Dolby_Digital_Plus_51';
        		else
        			$cn.data.PreferredAudioType = 'Dolby_Digital_Plus_Stereo';
        	}
        	       	
        	if(bDTSEnable && !bDolbyEnable){
        		if($cn.data.DTS51Enable)
        			$cn.data.PreferredAudioType = 'DTS_Express_51';
        		else
        			$cn.data.PreferredAudioType = 'DTS_Express_Stereo';
        	}
        }
        
		if($cn.config.EnableJinni !== null && $cn.config.EnableJinni != "auto") {
            log.write("Overwrite EnableJinni setting: " + $cn.config.EnableJinni);
			$cn.data.jinniEnable = $cn.config.EnableJinni;
		}
		
		if($cn.config.EnableFlixster !== null && $cn.config.EnableFlixster != "auto") {
            log.write("Overwrite EnableFlixster setting: " + $cn.config.EnableFlixster);
			$cn.data.flixsterEnable = $cn.config.EnableFlixster;
		}
		
		if($cn.config.EnableBaseline !== null && $cn.config.EnableBaseline != "auto") {
            log.write("Overwrite EnableBaseline setting: " + $cn.config.EnableBaseline);
			$cn.data.baselineEnable = $cn.config.EnableBaseline;
		}
		
		if($cn.config.AllowedRegionOverride !== null && $cn.config.AllowedRegionOverride != "auto") {
			$cn.data.AllowedRegions = $cn.config.AllowedRegionOverride;
		}
		
		//If parental controls are configured and the pin is enabled on startup then force pin popup and filter content
		log.write("$cn.data.ParentPinEnabledOnStartup: " + $cn.data.ParentPinEnabledOnStartup);
        if($cn.data.ParentalControlsConfigured && $cn.data.ParentPinEnabledOnStartup) {
			//Setup default params so that content is filtered on startup
			$cn.data.ParentPinEnabled = true;
			$cn.data.IsParent = false;
            application.saveAuthToken();
		}
        else if($cn.data.ParentalControlsConfigured) {
            // leave ParentPinEnabled set as saved in prior run
            $cn.data.IsParent = !$cn.data.ParentPinEnabled;
        }
        else {
            // Reset to defaults
            $cn.data.IsParent = true;
            $cn.data.ParentPinEnabled = false;
            $cn.data.ParentPinEnabledOnStartup = false;
            $cn.data.PurchasePinEnabled = false;
            application.saveAuthToken();
        }
		
		//Setup logging preferences
		log.session.lastSync = new Date();
		log.session.sessionLimitMinutes  = $cn.data.SessionLimitMinutes;
		log.session.sessionLimitRows  = $cn.data.SessionLimitRows;
		log.session.checkinTimer.Interval = $cn.data.SessionLimitMinutes * 60 * 1000;
		log.session.checkinTimer.Tick = log.session.upload; 
		log.session.checkinTimer.Start();
    },
    navigationSetup: function(){
		this._methodMap = {};	
		
		$('navigation').onkeyup = function(evnt){
			application.RepeatKeyBlock = false;
			var payload = {};
			
			if(!application.isBusy) {
//				
//				/*log.write(evnt.keyCode + ":  " + application.keys.KEY_ENTER);*/
//				log.write("keycode: " + evnt.keyCode);
				switch (evnt.keyCode) {
//					case application.keys.KEY_PANEL_CH_DOWN:
//	            	case application.keys.KEY_DOWN:
//	            		payload.direction = "down";
//						payload.current = application.element.current;
//	            		break;
//	            	case application.keys.KEY_PANEL_CH_UP:
//					case application.keys.KEY_UP:
//						payload.direction = "up";
//						payload.current = application.element.current;
//	            		break;
//					case application.keys.KEY_PANEL_VOL_UP:
	                case application.keys.KEY_RIGHT:
	                	payload.direction = "right";
						payload.current = application.element.current;
	            		break;
//	                case application.keys.KEY_PANEL_VOL_DOWN:
					case application.keys.KEY_LEFT:
						payload.direction = "left";
						payload.current = application.element.current;
	            		break;					
//	                case application.keys.KEY_PAGE_UP:
//	                	payload.direction = "pageup";
//						payload.current = application.element.current;
//	            		break;
//	                case application.keys.KEY_PAGE_DOWN:
//	                	payload.direction = "pagedown";
//						payload.current = application.element.current;
//	            		break;
	                default:
	                	break;
//					
				}
//				
    			application.events.publish("keyup", payload);
			}			
		};
		
		$('navigation').onkeydown = function(evnt){
            var keycode = evnt.keyCode;
			/* This object keeps track of all the key events */
			var blockKey = false;
            var time = $cn.utilities.DateDiff(new Date(), application.LastKeyDown);
            
            log.write("blocking access is: " + application.blockWidgetAccess);
            // Treat return key like exit EULA showing
            if (application.blockWidgetAccess) {
                log.write("blocking widget access");
                if (keycode == application.keys.KEY_PANEL_MENU || keycode == application.keys.KEY_RETURN) {
                    log.write("back key override");
                    keycode = application.keys.KEY_EXIT;
                }
            }
            log.write("exit is " + application.keys.KEY_EXIT);
            log.write("key code after all - now - is: " + keycode);
            
            // This section deals with the cases where be want to ignore the key, typically if we get too many
            // keys in a row before a duration. RepeatKeyBlock is used internally for the press and hold case
            // while TempKeyBlock is used by other classes to prevent key interaction in certain cases.  
            
			if (application.RepeatKeyBlock == true && (time < application.RepeatKeyBlockDuration)) {
				blockKey = true;
				if (this.DEBUG) log.write("RepeatKeyBlock set");
			}
			else {
				if (this.DEBUG) log.write("RepeatKeyBlock NOT set");
			}

			// Allow the app to temporarily block key presses for a duration of time. 
			if(application.TempKeyBlock) {
				if(time < application.TempKeyBlockDuration) {
					blockKey = true;
				}
				else {
					application.TempKeyBlock = false;
				}
			}
			
            //Allow the app to block the Enter key. Very Dangerous so it must be used with duration.
			// This functionality does not seem to be used as of 2013/02/04. 
			var blockEnter = false;
            if(application.TempKeyBlockEnter){
                if(time < application.TempKeyBlockDuration) {
                    blockEnter = true;
                }
                else {
                    application.TempKeyBlockEnter = false;
                }
            }
			
            if (!application.isBusy && blockEnter == true &&
				(keycode == application.keys.KEY_PANEL_ENTER ||
				 keycode == application.keys.KEY_PANEL_SOURCE ||
				 keycode == application.keys.KEY_ENTER)) {
	        	 blockKey = true;
			}
			
			// If we want to block keys then bail here..  
            if (blockKey) {
                application.blockNavigation(evnt);
                return;
            }
            			
			// Keep track of the last time that something was clicked so we can check next time through
            // whethhr to keep blocking keys. Set RepeastKeyBlock which keys unset in keyup.
				application.LastKeyDown = new Date();
			application.RepeatKeyBlock = true;
		    
		    var payload = {
				event: {
					keyCode: keycode
				}
			};
			
			if(!application.isBusy) {
				
				/*log.write(keycode + ":  " + application.keys.KEY_ENTER);*/
				log.write("keycode: " + keycode);
				
				switch (keycode) {
					case application.keys.KEY_PANEL_CH_DOWN:
	            	case application.keys.KEY_DOWN:
	            		payload.direction = "down";
	            		payload.current = application.element.current;
	            		application.events.publish("navigate", payload);
	            		break;
	            	case application.keys.KEY_PANEL_CH_UP:
					case application.keys.KEY_UP:
						payload.direction = "up";
						payload.current = application.element.current;
	            		application.events.publish("navigate", payload);
						break;
					case application.keys.KEY_PANEL_VOL_UP:
	                case application.keys.KEY_RIGHT:
	                	payload.direction = "right";
						payload.current = application.element.current;
	            		application.events.publish("navigate", payload);
	                	break;
	                case application.keys.KEY_PANEL_VOL_DOWN:
					case application.keys.KEY_LEFT:
						payload.direction = "left";
						payload.current = application.element.current;
	            		application.events.publish("navigate", payload);
						break;
					case application.keys.KEY_PANEL_ENTER:
	            	case application.keys.KEY_PANEL_SOURCE:
	                case application.keys.KEY_ENTER:
							// Pressing the Enter button on the remote control moves the 
							// focus away from the wheel to the next control to the right. 
		                	log.write("CURRENT ELEMENT: " + application.element.current);
		                	
							if(!$(application.element.current).get("action")) {
								payload.direction = "right";
								payload.keypressed = application.keys.KEY_ENTER;
								payload.current = application.element.current;
								application.events.publish("navigate", payload);
							} else {
								payload.direction = "select";
								application.events.publish("select", payload);
							}
	                	break;
					case application.keys.KEY_PANEL_MENU:
	                case application.keys.KEY_RETURN:
						application.blockNavigation(evnt);
		                	payload.direction = "back";
		                	application.events.publish("back", payload);
	                	break;
	                case application.keys.KEY_MUTE:
	                	break;
	                case application.keys.KEY_INFO:
	                	break;
	                case application.keys.KEY_EXIT:
	                	application.blockNavigation(evnt);
                        if (application.blockWidgetAccess) {
                            application.events.publish("no_choice_exit", payload);
                        } else {
	                	application.events.publish("exit", payload);
                        }
	                	break;
	                case application.keys.KEY_INFOLINK:
	                	break;
	                case application.keys.KEY_RW:
	            		application.events.publish("rewind", payload);
	                	break;
	                case application.keys.KEY_REWIND_:
	                	log.write('skip back');
	            		application.events.publish("skipback", payload);
	                	break;
	                case application.keys.KEY_PAUSE:
	            		application.events.publish("pause", payload);
	                	break;
	                case application.keys.KEY_FF:
	            		application.events.publish("fastforward", payload);
	                	break;
	                case application.keys.KEY_FF_:
	                	log.write('skip forward');
	            		application.events.publish("skipforward", payload);
	                	break;
	                case application.keys.KEY_PLAY:
	            		application.events.publish("play", payload);
	                	break;
	                case application.keys.KEY_STOP:
	            		application.events.publish("stop", payload);
	                	break;
                    case application.keys.KEY_PLAY_PAUSE:
                        application.events.publish("play_pause", payload);
                        break;
                    case application.keys.KEY_CC_TOGGLE:
                        application.events.publish("cc_toggle", payload);
                        break;
	                case application.keys.KEY_VOL_UP:
	                	break;
	                case application.keys.KEY_VOL_DOWN:
	                	break;
	                case application.keys.KEY_SUBTITLE:
	                	break;
	                case application.keys.KEY_PAGE_UP:
	                	payload.direction = "pageup";
						application.events.publish("navigate", payload);
	                	break;
	                case application.keys.KEY_PAGE_DOWN:
	                	payload.direction = "pagedown";
						application.events.publish("navigate", payload);
	                	break;
	                default:
	                	break;
					
				}
				
				application.events.publish("keydown", payload);
			}
			else {
				log.write("Application is busy block navigation... (Except mandatory listeners)");
				switch (keycode) {
				case application.keys.KEY_PANEL_CH_DOWN:
            	case application.keys.KEY_DOWN:
            		payload.direction = "down";
					payload.current = application.element.current;
            		application.events.publish("blockednavigate", payload);
            		break;
            	case application.keys.KEY_PANEL_CH_UP:
				case application.keys.KEY_UP:
					payload.direction = "up";
					payload.current = application.element.current;
            		application.events.publish("blockednavigate", payload);
					break;
				case application.keys.KEY_PANEL_VOL_UP:
                case application.keys.KEY_RIGHT:
                	payload.direction = "right";
					payload.current = application.element.current;
            		application.events.publish("blockednavigate", payload);
                	break;
                case application.keys.KEY_PANEL_VOL_DOWN:
				case application.keys.KEY_LEFT:
					payload.direction = "left";
					payload.current = application.element.current;
            		application.events.publish("blockednavigate", payload);
					break;
				case application.keys.KEY_PANEL_ENTER:
            	case application.keys.KEY_PANEL_SOURCE:
                case application.keys.KEY_ENTER:
					// Pressing the Enter button on the remote control moves the 
					// focus away from the wheel to the next control to the right.
                    //if enter is blocked and is a select, it will be blocked. ex:during checkout so you don't double check out
					if(!$(application.element.current).get("action")) {
						payload.direction = "right";
						payload.current = application.element.current;
						application.events.publish("blockednavigate", payload);
					} else {
						payload.direction = "select";
						application.events.publish("select", payload);
					}
                	break;
				case application.keys.KEY_PANEL_MENU:
                case application.keys.KEY_RETURN:
					application.blockNavigation(evnt);
                	payload.direction = "back";
                	application.events.publish("back", payload);
                	break;
                case application.keys.KEY_EXIT:
                	application.blockNavigation(evnt);
                    if (application.blockWidgetAccess) {
                        application.events.publish("no_choice_exit", payload);
                    } else {
                	application.events.publish("exit", payload);
                    }
                	break;
                case application.keys.KEY_INFOLINK:
                	break;
                case application.keys.KEY_PAUSE:
            		application.events.publish("pause", payload);
                	break;
                case application.keys.KEY_PLAY:
            		application.events.publish("play", payload);
                	break;
                case application.keys.KEY_STOP:
            		application.events.publish("stop", payload);
                	break;
                default:
                	break;
				
			}
			}
		};
        
		$('navigation').focus();
		
		application.events.subscribe(application, "navigate", application.defaultNavigation);
		application.events.subscribe(application, "exit", application.defaultExit);
		application.events.subscribe(application, "back", application.defaultNavigation);
		application.events.subscribe(application, "select", application.defaultAction);	
		application.events.subscribe(application, "goback", application.state.loadPrevious);
		application.events.subscribe(application, "error", application.exception.onHandleError);
	},
	exit: function(){
		log.write('application.exit: UI Closing.');		
		
		if("WebSocketManager" in window ) {
			if("WebSocket" in window) {
				// Close App, this is the last call to SDK.
				log.write("application.exit: App quitting.");
				var request = '<RNOPlatformCall>$$REQUESTID$$<QuitFlash/></RNOPlatformCall>'; 
				WebSocketManager.send(request, this, function(response) {
					WebSocketManager.shutdown();
                });
            }
		}
			
		device.exit();
	},
	reset: function(){
		log.write("Application reset");
		
		/* The reset function should be called when you want to refresh certain data in the application. The most common use for this is user switching. If you are logged in as a parent then the reset function will clear your cached data and reload with your settings. */
		$cn.data.TitlesByGenreID = -1;
		$cn.data.TitlesByGenrePages = {};
		$cn.data.EpisodeCache = {};
		$cn.data.TitlesByCast = {};
		$cn.data.EpisodeListCache = {};
		$cn.data.TitlesBySimilar = {};
		$cn.data.LibraryWheelItems = {};
		$cn.data.MyVideos = [];
		application.state.purge();
	},
    events: {
		/*
		 * Current Listenable Events
		 *  'gainfocus',
		 *	'losefocus',
		 *	'keydown', 
		 *	'navigate',
		 *	'hideView',
		 *	'showView',
		 *		-- payload.direction = ['up','right','down','left'];
		 */
        evnts: {},
        appEvents: {}, /* App events are the default events being sent from the application. They can be overridden by the views by calling evnt.preventDefault(); */
        subscribe: function(context, eventName, callback) {
	        	
	        	var evnt = {context: context, callback: callback};
                //log.write(context.id);
	        	if(context.id == "application") {
	        		this.appEvents[eventName] = this.appEvents[eventName] || [];
	        		this.appEvents[eventName].push(evnt);
	        	}
	        	else {
	        		//Only add an event if the subscriber has not already been added.
	        		var alreadyExists = false;
	        		
	        		if(this.evnts[eventName]) {
		        		this.evnts[eventName].each(function(e){
		        			if(e.context.id == context.id){
		        				alreadyExists = true;
		        			}		        			
		        		});
	        		}
	        		
	        		if(!alreadyExists){
		        		this.evnts[eventName] = this.evnts[eventName] || [];
		        		this.evnts[eventName].push(evnt);
	        		}
	        	}                
        },
        unsubscribe: function(context, eventName){
            var x,
                tmp,
                evnt;
        	/* Unsubscribe only clears control events. Application events are left */
            	if(this.evnts[eventName]){
            		tmp = this.evnts[eventName];
            		
            		if(tmp.length > 0) {
            			this.evnts[eventName] = [];
	            		
	            		for(x = 0; x < tmp.length; x++){
	            			evnt = tmp[x];
	            			if(evnt.context.id !== context.id) {
	            				this.evnts[eventName].push(evnt);
	            			}
	            		}
            		}
            	}
            	
        },            
        publish: function(eventName) {
                var i, callbacks = this.evnts[eventName], appCallbacks = this.appEvents[eventName], args;
                //log.write(eventName);
                log.write('Event: ' + eventName);
                if (callbacks || appCallbacks) {
                	args = Array.prototype.slice.call(arguments, 1);
                	
                	var _defaultPrevented = false;
                    var evnt = {
                    	preventDefault: function(){
                    		_defaultPrevented = true;
                    	},
                    	args: args
                    };
                    
                    if(callbacks) {
	                    for (i = 0; i < callbacks.length; i++) {
	                    	evnt.context = callbacks[i].context;
	                    	callbacks[i].callback.apply(null, [evnt]);	                    	                    	
	                    }
                    }
                    
                    if(appCallbacks) {
	                    for (i = 0; i < appCallbacks.length; i++) {
	                    	if(!_defaultPrevented) {
	                    		evnt.context = appCallbacks[i].context;
	                    		appCallbacks[i].callback.apply(null, [evnt]);
	                    	}                    	
	                    }
                    }
                }
        }        
    },
    exception: {
    	categories: {},
    	onHandleError: function(payload){
    		BrowseView.onHandleError(payload);
    	},
    	resolveMessagePath: function(state){
    		var category = null;
    		
    		//If state is null set default to system_messages. Else load dynamically
    		if(!state){
				category = application.resource["system_messages"];
    		}
    		else {
	    		if(this.categories[state]) {
		    		if(application.resource[this.categories[state]]) {
		    			category = application.resource[this.categories[state]];
		    		}
		    		else {
		    			category = application.resource["system_messages"];
		    		}
	    		}
	    		else {
	    			if(application.resource) {
	    				category = application.resource["system_messages"];
	    			}
	    		}
    		}
    	
    		return category;
    	}
    },
    state: {
    	_history: [],
		_viewstate: {},   
    	purge: function(){
	    	application.state._history = null;
	    	application.state._history = [];
			application.state._viewstate = {};
    	},
    	save: function(template){
			
			if (application.currentView.currentState) {
			
				log.write("function: application.state.save()");
				var focusedElem = null;
				
				if (application.element.current != null && application.element.current != '' && document.getElementById(application.element.current)) {
					focusedElem = application.element.current;
					log.write("Setting current focused element: " + focusedElem);
				}
				
				var state = {};
				var historyId = "history_" + application.utility.generate.counter++;				
				$cn.data.History[historyId] = document.getElementById('uicontainer').innerHTML;
				
				application.events.publish('savestate', state);
 				
				var view = {
					id: historyId,
					state: state,
					template: template,
					focusedElem: focusedElem,
					containerClass: document.getElementById('uicontainer').className,
					currentState: application.currentView.currentState,
					viewState: application.state._viewstate[application.currentView.currentState]
				};
				
				application.state._history.push(view);
				log.write("application.state._history.length: " + application.state._history.length);
				
				if(application.state._history.length > 30) {
					application.state._history.shift();
					log.write("First History item purged.");
				}
				
				application.state._viewstate[application.currentView.currentState] = view;
				state = null;
				view = null;
			}
    	},
    	previous: function(){
    		
    		//Set new waittimer location
    		/* Need to see if we need a spinner here */
            log.write("function: application.previousView()");
    		
    		//This is custom code to ensure that the player is turned off    
    		if(application.currentView.currentState == 'player-view' && application.currentView.PlayerControl._currentStatus != application.currentView.PlayerControl.STOPPED) {
    	 		log.write('Player is still player while changing views. Stop Player.');
    	 		application.currentView.PlayerControl._currentStatus = application.currentView.PlayerControl.STOPPED;
                BrowseView.PlayerControl.stopPlayer();
    		}
    		
    		if(application.state._history[application.state._history.length - 1]) {
    			log.write("###---###");
    			// Do not go back to a saved settings state if we were in debug mode
    			if (application.state._history[application.state._history.length - 1].currentState === "settings-view" && application.doNotRestoreSettings === true) {
    				application.doNotRestoreSettings = false;
    				BrowseView.goSettings(0);
    				return;
    			}
    			application.events.publish("goback",{});
            }
            else{
            	log.write("Current History Length: " + application.state._history.length);
            	
            	if(application.state._history.length === 0 && (BrowseView.currentState === 'browse-view' || BrowseView.currentState === 'merch-view')){
            		application.events.publish("return",{});
            	}
            	else {
            		BrowseView.currentState = null;
            		BrowseView.goHome();
            	}
            }
    	},
    	loadPrevious: function(payload){
    		log.write('Load Previous View');

			var previousView = application.state._history.pop();
			
			application.currentView.currentState = previousView.currentState;
			application.currentView.LastGridProcess = "backaction";
			application.currentView.CurrentProcessLoaded = true;
			var savedState = application.state._viewstate[application.currentView.currentState];
	
			if (savedState)
				application.state._viewstate[application.currentView.currentState] = savedState.viewState;
				
			application.state.loadPreviousView(previousView);
			var innerHTML = $cn.data.History[previousView.id];

			if (innerHTML) {
				$cn.data.History[previousView.id] = null;
				delete innerHTML;
			}
    		
    		savedState = null;
    		previousView = null;
		},
    	loadPreviousView: function(previousView){
			if (previousView.id) {
				if ($cn.data.History[previousView.id]) {
					var innerHTML = $cn.data.History[previousView.id];
					var uiContainer = document.getElementById('uicontainer');

					log.write("Loading view: " + previousView.id);
					uiContainer.setAttribute('class', previousView.containerClass);
					application.putInnerHTML(uiContainer, innerHTML);
				}

				application.element.current = null;
				
				if (previousView.focusedElem) {
					log.write("Setting default focus to: " + previousView.focusedElem);
					application.element.current = previousView.focusedElem;
				}

				application.events.publish('restorestate', previousView.state);
				application.currentView.layoutIsDirty = true;
            }
            else {
                log.write("Previous view DOM object not found.");                
            }
    		
    		previousView = null;
    	},
		loadState: function(state) {
			var previousView = application.state._viewstate[state];
			
			if (previousView) {
				// Need to create a copy since the same object
				// is also stored in the history stack.
				var temp = $extend({}, previousView);
				
				BrowseView.currentState = state;
				this.loadPreviousView(temp);
				
				temp = null;
				return true;
			}
				
			return false;
		}
    },
	loadView: function(view, params, noSaveCurrentViewInHistory) {
    	
		/* Fire Hide View method before destroying HTML */
		this.events.publish("hideView");
		if (this.currentView && typeof this.currentView.hideView == 'function') {
			this.currentView.hideView();
		}

		log.write("preparing to destroy layout");
		/* Clean-up listeners and layout of current view */
		this.ui.destroyLayout();
		log.write("layout destroyed");
		
	    /* Load and render view */
		this._views[view.id] = view;
		this.currentView = view;	
		log.write("preparing to load layout");	
		this.ui.loadLayout(view.id);
		log.write("layout destroyed");
		this.currentView.init(params, "forward");
		log.write("initialize view");
		log.write("preparing to bind actions");
		this.element.bindActions(view.id);
		log.write("actions binded");
		if(!document.getElementById(application.element.current))
			application.navigator.setFirstFocusableElement();
		this.currentView.render();
		this.events.publish("loadView",{view: this.currentView});
		
	},
	registerHandler: function(view, methodName, callback){
		this._methodMap[view + ":" + methodName] = callback;
	},
	defaultNavigation: function(payload){
		payload = payload.args[0];
		
		/* No element is selected. Set focus to first focusable element */
		if((!application.element.current || application.element.current == '') ||  ((application.element.current && application.element.current != '') &&  !document.getElementById(application.element.current))){
			application.navigator.setFirstFocusableElement();
		}
		
		/* Element found perform navigation */
		switch(payload.direction){
			case "up":
				application.navigator.up(payload);
				break;
			case "down":
				application.navigator.down(payload);
				break;
			case "right":
				application.navigator.right(payload);
				break;
			case "left":
				application.navigator.left(payload);
				break;
			case "back":
				application.state.previous();
				break;
			default:
				break;
		}		
	},
	defaultExit: function(payload) {
		device.exit();
	},
	defaultAction: function(payload){
		payload = payload.args[0];
		log.write('Item selected');
		
		if($(application.element.current).get("action")){
			eval('(' + $(application.element.current).get("action")   + ')');
		}
	},
	saveAuthToken: function(p){
		if (this.DEBUG) log.write('application.saveAuthToken: $cn.data.AuthToken: ' + $cn.data.AuthToken);
		if (this.DEBUG) log.write('application.saveAuthToken: $cn.data.DeviceName: ' + $cn.data.DeviceName);
		if (this.DEBUG) log.write('application.saveAuthToken: $cn.data.UserEmailAddress: ' + $cn.data.UserEmailAddress);
		if (this.DEBUG) log.write('application.saveAuthToken: $cn.data.AdultPinEnabled: ' + $cn.data.AdultPinEnabled);
		if (this.DEBUG) log.write('application.saveAuthToken: $cn.data.ParentPinEnabled: ' + $cn.data.ParentPinEnabled);
		if (this.DEBUG) log.write('application.saveAuthToken: $cn.data.PurchasePinEnabled: ' + $cn.data.PurchasePinEnabled);
		if (this.DEBUG) log.write('application.saveAuthToken: $cn.data.ParentalControlsConfigured: ' + $cn.data.ParentalControlsConfigured);
		if (this.DEBUG) log.write('application.saveAuthToken: $cn.data.CurrentRegion: ' + $cn.data.CurrentRegion);
		if (this.DEBUG) log.write('application.saveAuthToken: $cn.data.ParentPinEnabledOnStartup: ' + $cn.data.ParentPinEnabledOnStartup);
	            
        var authline = '{"authToken": "' + $cn.data.AuthToken + 
	            		'","adultPinEnabled": "' + $cn.data.AdultPinEnabled + 
	            		'","parentPinEnabled": "' + $cn.data.ParentPinEnabled + 
	            		'","deviceName": "' + $cn.data.DeviceName + 
	            		'","emailAddress": "' + $cn.data.UserEmailAddress +
	            		'","purchasePinEnabled": "' + $cn.data.PurchasePinEnabled +
	            		'","parentalControlsConfigured": "' + $cn.data.ParentalControlsConfigured +
	            		'","parentPinEnabledOnStartup": "' + $cn.data.ParentPinEnabledOnStartup +            		
	            		'"}';
		
		configuration.writeValue(configuration.getPrefixedSettingKey('auth'), authline);
	},
	clearAuthToken: function(){
		log.write("Clearing bad auth token.");

		configuration.clearValue(configuration.getPrefixedSettingKey('auth'));
		configuration.clearValue(configuration.getPrefixedSettingKey('welcome'));
		
		application.deleteActivationFile();

        $cn.data.AuthToken = "";
        $cn.data.IsParent = false;
        $cn.data.ParentPinEnabledOnStartup = false;
        $cn.data.ParentPinEnabled = false; 
        $cn.data.PurchasePinEnabled = false;
        $cn.data.AdultPinEnabled = false; 
        $cn.data.LastCacheLoadTimeUTC = null; /* Last time in UTC when server side cache was reloaded. */
        $cn.data.ShouldUpdateCache = false; /* Calculate based on input if local cache should be purged. */
        $cn.data.AuthTokenActive = false; /* If auth token present in header it will be checked to verify it is active. */ 
        $cn.data.purchTypeFilter = 'any';
        $cn.data.PassCache = {};
        $cn.data.UserEmailAddress = '';
        $cn.data.PendingWishlistItem = '';
        $cn.data.DeviceName = '';
        $cn.data.DeviceID = '';
        $cn.data.MyVideos = [];
        $cn.data.CurrentRegion = '';
            
		var authline = '{"authToken": "' + $cn.data.AuthToken + 
                		'","adultPinEnabled": "' + $cn.data.AdultPinEnabled + 
                		'","parentPinEnabled": "' + $cn.data.ParentPinEnabled + 
                		'","deviceName": "' + $cn.data.DeviceName + 
                		'","emailAddress": "' + $cn.data.UserEmailAddress +
                		'","purchasePinEnabled": "' + $cn.data.PurchasePinEnabled +
                		'","parentalControlsConfigured": "' + $cn.data.ParentalControlsConfigured +
                		'","parentPinEnabledOnStartup": "' + $cn.data.ParentPinEnabledOnStartup +
                		'"}';

		configuration.writeValue(configuration.getPrefixedSettingKey('auth'), authline);
	},
    resolveEnv: function(a_cb){
        var result = {err: true, text: '', data:{}};
    
        if(application.appSetting('ApiUrl') == 'auto')
		{
			// See if we can make an authenticated call to the API
			webservices.makeAsyncRequestExt('https://enpointswitch.cinemanow.com', 'api/orbit/util/default.ashx', 'getDeviceEnv', {}, false, this,
				function(obj){
					result.err = false;
					result.text = 'CinemaNOW request successful';
					result.data = obj.data;
					
					for(var i = 0; i < result.data.result.enviroSelectable.length; i++) {
						result.data.result.enviroSelectable[i].keyUrl = 'https://' + result.data.result.enviroSelectable[i].keyName + '.cinemanow.com';
					}
					
					a_cb.call(this, result);
				},
				function(){
					// failure
					// try calling through reverse proxy setup
					var proxyurl = 'http://' + document.domain + '/stgapi';
					webservices.makeAsyncRequestExt(proxyurl, 'api/orbit/util/default.ashx', 'getDeviceEnv', {}, false, this,
						function(obj) {
							result.err = false;
							result.text = 'CinemaNOW request successful';
							result.data = obj.data;

							for(var i = 0; i < result.data.result.enviroSelectable.length; i++) {
								result.data.result.enviroSelectable[i].keyUrl = 'http://' + document.domain + '/' + result.data.result.enviroSelectable[i].keyName;
							}
							
							a_cb.call(this, result);
						},
						function() {
							// failure, authentication not supported
							application.authSupported = false;
							
							// Setup default, browseonly, environment
							var response = {
							   "result": {
									"defaultKey":"stgapi",
									"enviroSelectable":[{"keyName":"stgapi","keyValue":"*Partner Staging","keyUrl":"https://stgapi.cinemanow.com"}],
									"endPoints": [
										{"keyName":"auth","keyValue":"api/orbit/auth/default.ashx"},
										{"keyName":"browse","keyValue":"api/orbit/browse/default.ashx"},
										{"keyName":"commerce","keyValue":"api/orbit/commerce/default.ashx"},
										{"keyName":"library","keyValue":"api/orbit/library/default.ashx"},
										{"keyName":"search","keyValue":"api/orbit/search/default.ashx"},
										{"keyName":"stream","keyValue":"api/orbit/stream/default.ashx"},
										{"keyName":"titledata","keyValue":"api/orbit/titledata/default.ashx"},
										{"keyName":"util","keyValue":"api/orbit/util/default.ashx"},
										{"keyName":"wishlist","keyValue":"api/orbit/wishlist/default.ashx"},
										{"keyName":"download","keyValue":"api/orbit/download/default.ashx"}
									],
								}
							};
							
							result.err = false;
							result.text = 'CinemaNOW request successful';
							result.data = response;

							a_cb.call(this, result);
						}, true, false
					);
				}, true, false
			);
		}
		else {
			this.apiUrl = this.appSetting("ApiUrl");
			//log.write('Current API URL: ' + this.apiUrl);
            $cn.data.apiUrl  = this.apiUrl;
            
            a_cb.call(this, this.apiUrl);
		}
    },
	bandwidthCheck :{
		lastRan: null,
		callbackParams: null,
		callbackType: "purchase",
		successCondition: 0		
	},
	testConnection: function(cb, optionalMaxToWait){	
		// Note: http://jsfiddle.net/pajtai/pN2R8/
		var img 		= new Image(),
			allDone 	= false, // to enable ensuring calback only fires once
			maxToWaitMs = optionalMaxToWait || 5000;
		img.onload = function(){						
			if (! allDone) {
				log.write("ERROR: TEST CONNECTION PASSED");
				cb.call(this, {"result": true});
				allDone = true;
			}
		};
		img.onerror = function(){						
			if (! allDone) {
				log.write("ERROR: TEST CONNECTION FAILED");
				cb.call(this, {"result": false});
				allDone = true;
			}
		};
		img.src = $cn.data.ImageLoadTest + '?d=' + escape(Date());
		// set a time limit for the timeout
		setTimeout(function() {						
			if (! allDone) {
				log.write("ERROR: TEST CONNECTION TIMED OUT");
				cb.call(this, {"result": false});
				allDone = true;
			}
		}, maxToWaitMs);
	},
	createActivationFile: function() {
		device.createActivationFile();
	},
	deleteActivationFile: function() {
		device.deleteActivationFile();
	},
	loadAnimation: function(animation){
		
		var resource = eval("application.resource.animation." + animation);
		
		if (resource) {
			if (resource.options.transition && typeof(resource.options.transition) == "string")
				resource.options.transition = eval(resource.options.transition);
		}
		
		return resource;
	},
	putInnerHTML: function(pDiv, pContents) {
        if (pDiv != null) {
            //
        	while (pDiv.firstChild) {
        		if (pDiv.deleteChild)
        			pDiv.deleteChild(pDiv.firstChild);
        		else 
        			pDiv.removeChild(pDiv.firstChild);
        	}
            //
        	pDiv.innerHTML = pContents;
        }
    },
    blockNavigation: function(event) {
        event.preventDefault();
    }
};
//-----------------------------------------------------------------------------
// ccrender.js
// Copyright (c) 2012 - 2013, Rovi Corporation.  All rights reserved.
//-----------------------------------------------------------------------------

//Close Caption Render
var ccrender = {
    safearea: 0.05,
    width: 960,
    height: 540,
    originX: 0,
    originY: 0,
    resolutionX: 960,
    resolutionY: 540,
    minRow: 4,
    maxFontSize: 32,   //A work around font size to avoid overlap in most titles.    
    renderHtmlDivs: [],
    styleList: [],
    cellResolution: { cols: 32, rows: 15 }, //Set the default value
    defaultCCDisplayEnabled: false,
    userCCDisplayEnabled: undefined,
    isCCStreamAvailable: false,

    init: function(containerId) {
        log.write('ccrender.init');

        // Add a "safe area" around the screen.
        this.originX = Math.floor(this.width * this.safearea);
        this.originY = Math.floor(this.height * this.safearea);
        this.resolutionX = this.width - 2 * this.originX;
        this.resolutionY = this.height - 2 * this.originY;

        this.styleList = [];
        this.renderHtmlDivs = [];

        var container = $(containerId),
            i = 0;

        if (container && container.childNodes && container.childNodes.length) {
            for (i = 0; i < this.minRow && i < container.childNodes.length; i++) {
                var node = container.childNodes[i];
                //Clean up the nodes to avoid show last closed caption title.
                node.set('html', '');
                node.hide();
                this.renderHtmlDivs.push(node);
            }

            if (i < this.minRow) {
                log.write('ccrender.init: container number is smaller than the minimum (at least 4)!');
            }
        }

        this.defaultCCDisplayEnabled = configuration.readValue('DefaultCCDisplayEnabled') || this.defaultCCDisplayEnabled;
        this.userCCDisplayEnabled = configuration.readValue('UserCCDisplayEnabled');
    },

    isCCEnabled: function() {
        if (!this.userCCDisplayEnabled) { //First time run
            return this.defaultCCDisplayEnabled;
        } else {
            return this.userCCDisplayEnabled;
        }
    },

    setCCEnabled: function(enable) {
        this.userCCDisplayEnabled = enable;
        configuration.writeValue('UserCCDisplayEnabled', enable);
    },

    isCCAvailable: function() {
        return this.isCCStreamAvailable;
    },

    setCCAvailable: function(available) {
        this.isCCStreamAvailable = available;
    },

    convertXMLNodetoJSObj: function(xmlNodes) {
        log.write('ccrender.convertXMLNodetoJSObj: Enter');
        var nodes = xmlNodes;
        var tts = []; //Timed Title Array to store given timed title
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].nodeName == "Metadata") {
                styleNodes = nodes[i].childNodes;
                for (var j = 0; j < styleNodes.length; j++) {
                    if (styleNodes[j].nodeName == "Style") {
                        //Closed Caption Style
                        var ccs = this._parseXMLStyleNode(styleNodes[j]);
                        this.styleList.push(ccs);
                    } else if (styleNodes[j].nodeName == "cellResolution") {
                        //Parse Cell Resolution Information
                        var cellres = this._parseCellResolution(styleNodes[j]);
                        this.cellresolution = cellres;
                    }
                }
            }

            if (nodes[i].nodeName == "Data") {
                for (var j = 0; j < nodes[i].childNodes.length; j++) {
                    if (nodes[i].childNodes[j].nodeName == "p") {
                        //Get a timed title and push it to the array.
                        var tt = this._parseXMLParagraghNode(nodes[i].childNodes[j]);
                        tts.push(tt);
                    }
                }
            }
        }
        log.write('ccrender.convertXMLNodetoJSObj: Return');
        return tts;
    },

    renderCCXMLNodes: function(xmlNodes) {
        if (this.renderHtmlDivs.length >= this.minRow) {
            this.renderCCJSNodes(this.convertXMLNodetoJSObj(xmlNodes));
        } else {
            log.write('ccrender.renderCCXMLNodes: Should init firstly and the render nodes cannot be empty!');
        }
    },

    renderCCJSNodes: function(tts) {
        if (tts && tts.length > 0) {
            //TODO May add other renders
            this.renderPopupStyle(tts);
        } else { //Clean up
            for (var i = 0; i < this.renderHtmlDivs.length; i++) {
                this.renderHtmlDivs[i].set('html', '');
                this.renderHtmlDivs[i].hide();
            }
        }
    },

    renderPopupStyle: function(tts) {
        var i, j;

        for (i = 0; i < tts.length; i++) {
            this.renderHtmlDivs[i].set('html', tts[i].timedText);
            this.renderHtmlDivs[i].setStyles(tts[i].divStyle);
            this.renderHtmlDivs[i].show();
        }
        //Clean up other divs
        for (j = i; j < this.renderHtmlDivs.length; j++) {
            this.renderHtmlDivs[j].set('html', '');
            this.renderHtmlDivs[j].hide();
        }
    },

    renderRollupStyle: function(tts) {
        //TODO special code for roll up effect
    },

    renderPaintonStyle: function(tts) {
        //TODO special code for paint on effect
    },

    _parseCellResolution: function(node) {
        var cellResArray = node.textContent.split(" ");
        var cellRes = { cols: 32, rows: 15 }; //default value
        if (cellResArray && cellResArray.length == 2) {
            cellRes.cols = cellResArray[0];
            cellRes.rows = cellResArray[1];
        }
        return cellRes;
    },

    _parseXMLStyleNode: function(node) {
        var ccs = {};
        var id = node.getAttribute('id');

        //Set the value to closed caption style. If the style value not exist, set it to default value.
        var fontsize = this._getFontsize(node.getAttribute('fontSize'));
        var fontweight = node.getAttribute('fontWeight') || 'normal';
        var fontstyle = node.getAttribute('fontStyle') || 'normal';
        var fontfamily = 'cour';
        var color = node.getAttribute('color') || 'white';
        var background = node.getAttribute('backgroundColor') || 'black';
        var textdecoration = node.getAttribute('textDecoration') || 'none';
        ccs = { 'id': id, 'fontsize': fontsize, 'fontweight': fontweight, 'fontstyle': fontstyle, 'fontfamily': fontfamily,
            'color': color, 'background': background, 'textdecoration': textdecoration
        };
        log.write('ccrender._parseXMLStyleNode: get a style node');
        return ccs;
    },

    _parseXMLParagraghNode: function(node) {

        var ttWithStyle = { timedText: '', divStyle: {}, id: 0 };
        var pos = this._getPosition(node.getAttribute('origin'));
        var id = node.getAttribute('id');
        var width = this.resolutionX + 'px';
        var height = 0;
        ttWithStyle.divStyle = { 'id': id, 'left': pos.left, 'top': pos.top, 'width': width, 'height': height };

        var tt = "";
        //Find Text Node
        var childNodes = node.childNodes;
        for (var i = 0; i < childNodes.length; i++) {
            if (childNodes[i].nodeName == "t" || childNodes[i].nodeName == "b") {
                tt += this._parseXMLTextNode(childNodes[i]);
            }
        }
        ttWithStyle.timedText = tt;

        return ttWithStyle;
    },

    _parseXMLTextNode: function(node) {
        var text = "";
        if (node.nodeName == "t") {
            var ccs = this._getCCStyle(node.getAttribute('sid'));

            var fontsize = ccs.fontsize;
            var fontweight = ccs.fontweight;
            var fontstyle = ccs.fontstyle;
            var fontfamily = 'cour'; //TODO  ccs.fontfamily;
            var color = ccs.color;
            var background = ccs.background;
            var textdecoration = ccs.textdecoration;
            text = "<span style=" + "'" +
            "font-size:" + fontsize + ";" + "font-weight:" + fontweight + ";" + "font-style:" + fontstyle + ";" + "font-family:" + fontfamily + ";" +
            "color:" + color + ";" + "background:" + background + ";" + "text-decoration:" + textdecoration + ";" + "display:inline;" + "'" + ">" +
            node.textContent + "</span>";

        } else if (node.nodeName == "b") {
            text = "<br/>";
        }
        return text;
    },

    _getCCStyle: function(sid) {
        for (var i = 0; i < this.styleList.length; i++) {
            if (this.styleList[i].id == sid) {
                return this.styleList[i];
            }
        }
    },

    _getFontsize: function(value) {
        var fontsize = this.maxFontSize;
        if (value.indexOf('%') > -1) {
            // Font percent is relative to base font size, which is "1c". But some font sizes in these
            // files are wrong - they show 8% for what should be 80%. So we try a little rough fudging.
            fontsize = parseFloat(value.substring(0, value.indexOf('%')));
            if (fontsize < 10)
                fontsize *= 10;
            fontsize = Math.floor((fontsize * this.resolutionY) / (this.cellResolution.rows * 100));
        } else if (value.indexOf('px') > -1) {
            fontsize = value.substring(0, value.indexOf('px'));
        } else if (value.indexOf('c') > -1) {
            fontsize = Math.floor((this.resolutionY / this.cellResolution.rows) * value.substring(0, value.indexOf('c')));
        }
        //if (fontsize > this.maxFontSize) { // A work around to avoid overlap or font too large issue.
        //    fontsize = this.maxFontSize;
        //}
        return fontsize + 'px';
    },

    _getPosition: function(value) {
        var left = 0, top = 0;
        var origin = "";
        if (value) {
            origin = value.split(" ");
        }
        if (origin.length == 2) {
            left = Math.floor(origin[0].slice(0, origin[0].indexOf("%")) * this.resolutionX / 100);
            top = Math.floor(origin[1].slice(0, origin[1].indexOf("%")) * this.resolutionY / 100);
        } else {
            //To set default position when no position info
            left = Math.floor(this.resolutionX * 0.2);
            top = Math.floor(this.resolutionY * 0.8);
        }
        left += this.originX;
        top += this.originY;
        return { 'left': left + 'px', 'top': top + 'px' };
    }
};
